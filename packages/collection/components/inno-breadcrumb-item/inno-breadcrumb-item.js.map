{"version":3,"file":"inno-breadcrumb-item.js","sourceRoot":"","sources":["../../../src/components/inno-breadcrumb-item/inno-breadcrumb-item.tsx"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAOvF,MAAM,OAAO,cAAc;;;;;wBAiBE,EAAE;uBAGX,IAAI;2BAGA,IAAI;;IAtBf,WAAW,CAAiC;IAwBvD,eAAe;IACN,mBAAmB,CAAqD;IAEjF,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,WAAW,GAAS,CAAC;QAC3C,CAAC;QAED,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE;gBACL,cAAc,EAAE,CAAC,IAAI,CAAC,WAAW;aAClC,EACD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;YAE9F;gBACE;oBACG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,iBAAW,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK;oBACzF,eAAa;oBACZ,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,iBAAW,IAAI,EAAC,eAAe,EAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAC5G,CACD,CACA,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["/*\r\n * SPDX-FileCopyrightText: 2024 Innomotics GmbH\r\n *\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, h, Host, Prop } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-breadcrumb-item',\r\n  styleUrl: 'inno-breadcrumb-item.scss',\r\n  scoped: true,\r\n})\r\nexport class BreadcrumbItem {\r\n  @Element() hostElement!: HTMLInnoBreadcrumbItemElement;\r\n\r\n  /**\r\n   * Breadcrumb label\r\n   */\r\n  @Prop() label: string;\r\n  /**\r\n   * Icon to be displayed next ot the label\r\n   */\r\n  @Prop() icon: string;\r\n\r\n  /** @internal */ //will be generated automatically\r\n  @Prop() itemIndex: number;\r\n  /*\r\n  * The size of the icon if the icon property is not empty\r\n  */\r\n  @Prop() iconSize: number = 16;\r\n\r\n  /**@internal */\r\n  @Prop() visible = true;\r\n\r\n  /**@internal */\r\n  @Prop() showChevron = true;\r\n\r\n  /**@internal */\r\n  @Event() breadcrumbItemClick: EventEmitter<{ itemIndex: number, label: string }>;\r\n\r\n  render() {\r\n    if (!this.visible) {\r\n      return <Host class={'invisible'}></Host>;\r\n    }\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          'hide-chevron': !this.showChevron,\r\n        }}\r\n        onClick={() => this.breadcrumbItemClick.emit({ itemIndex: this.itemIndex, label: this.label })}\r\n      >\r\n        <li>\r\n          <a>\r\n            {this.icon ? (<inno-icon icon={this.icon} size={this.iconSize}></inno-icon>) : this.label}\r\n            <slot></slot>\r\n            {this.showChevron ? (<inno-icon icon=\"chevron_right\" class=\"chevron\" size={this.iconSize}></inno-icon>) : null}\r\n          </a>\r\n        </li>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}