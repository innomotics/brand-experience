{"version":3,"file":"inno-accordion.js","sourceRoot":"","sources":["../../../src/components/inno-accordion/inno-accordion.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Prop } from '@stencil/core';\r\nimport sanitizeHtml from 'sanitize-html';\r\n\r\n@Component({\r\n  tag: 'inno-accordion',\r\n  styleUrl: 'inno-accordion.scss',\r\n  scoped: true\r\n})\r\nexport class InnoAccordion {\r\n  /**\r\n   * Color variant of the accordion.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * You can programatically open/close the accordion with this property.\r\n   */\r\n  @Prop({ mutable: true }) collapsed = false;\r\n\r\n  /**\r\n   * Whether the accordion is the last in a group of accordions. Needed for styling.\r\n   */\r\n  @Prop({ mutable: true }) last = false;\r\n\r\n  /**\r\n   * Whether it is an accordion inside another accordion. Gives a different style then the main one.\r\n   */\r\n  @Prop({ mutable: true }) inner = false;\r\n\r\n  /**\r\n   * Text to display for the accordion. Always visible whether the accordion is opened or closed.\r\n   */\r\n  @Prop({ mutable: true }) label: string;\r\n\r\n  /**\r\n   * Secondary text for the accordion. Always visible whether the accordion is opened or closed.\r\n   */\r\n  @Prop({ mutable: true }) secondLabel: string;\r\n\r\n  /**\r\n   * This event is fired whenever the accordion is opened/closed via user interaction.\r\n   */\r\n  @Event() collapsedChanged: EventEmitter<{ element: HTMLInnoAccordionElement, collapsed: boolean }>;\r\n\r\n  @Element() hostElement!: HTMLInnoAccordionElement;\r\n\r\n  private anchorElementRef: HTMLAnchorElement;\r\n\r\n  private onHeaderClick() {\r\n    this.collapsed = !this.collapsed;\r\n    this.collapsedChanged.emit({ element: this.hostElement, collapsed: this.collapsed });\r\n  }\r\n\r\n  private toggleHoveredClass(hovered: boolean) {\r\n    if (hovered) {\r\n      this.anchorElementRef.classList.add(\"hovered\");\r\n      this.anchorElementRef.querySelectorAll(\"inno-accordion a.accordion\").forEach(accordion => {\r\n        accordion.classList.add(\"hovered\");\r\n      });\r\n    } else {\r\n      this.anchorElementRef.classList.remove(\"hovered\");\r\n      this.anchorElementRef.querySelectorAll(\"inno-accordion a.accordion\").forEach(accordion => {\r\n        accordion.classList.remove(\"hovered\");\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let iconSize: number = 24;\r\n    let icon: string = this.collapsed ? this.inner ? 'chevron_down_small' : 'plus' : this.inner ? 'chevron_up_small' : 'minus';\r\n    let headerTitle =\r\n      <div class=\"accordion-header-titles\">\r\n        <span class={{\r\n          'accordion-header-title': true,\r\n          'light': this.variant === 'light',\r\n          'dark': this.variant === 'dark',\r\n          'inner': this.inner\r\n        }} innerHTML={sanitizeHtml(this.label)}></span>\r\n        <span class={{\r\n          'accordion-header-title': true,\r\n          'second-label': true,\r\n          'light': this.variant === 'light',\r\n          'dark': this.variant === 'dark',\r\n          'inner': this.inner\r\n        }} innerHTML={sanitizeHtml(this.secondLabel)}></span>\r\n      </div>;\r\n\r\n    return (\r\n      <Host>\r\n        <a class={{\r\n          'accordion': true,\r\n          'light': this.variant === 'light',\r\n          'dark': this.variant === 'dark',\r\n          'last': this.last,\r\n          'open': !this.collapsed,\r\n          'inner': this.inner,\r\n        }}\r\n          ref={(ref) => (this.anchorElementRef = ref)}\r\n        >\r\n\r\n          <div class={{\r\n            'accordion-header': true,\r\n            'inner': this.inner,\r\n            'light': this.variant === 'light',\r\n            'dark': this.variant === 'dark',\r\n          }}\r\n            onClick={() => this.onHeaderClick()}\r\n            onMouseEnter={() => this.toggleHoveredClass(true)}\r\n            onMouseLeave={() => this.toggleHoveredClass(false)}\r\n          >\r\n\r\n            {!this.inner ? headerTitle : null}\r\n\r\n            <inno-icon class={{\r\n              'inner': this.inner,\r\n            }} icon={icon} size={iconSize} variant={this.variant}></inno-icon>\r\n\r\n            {this.inner ? headerTitle : null}\r\n\r\n          </div>\r\n\r\n          <section class={{\r\n            'accordion-content': true,\r\n            'inner': this.inner,\r\n            'light': this.variant === 'light',\r\n            'dark': this.variant === 'dark',\r\n            hide: this.collapsed,\r\n          }}>\r\n            <slot></slot>\r\n          </section>\r\n\r\n        </a>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}"]}