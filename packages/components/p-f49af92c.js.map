{"file":"p-f49af92c.js","mappings":"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","names":[],"sources":["src/components/inno-status-message/inno-status-message.values.ts","src/components/inno-status-message/inno-status-message.scss?tag=inno-status-message&encapsulation=scoped","src/components/inno-status-message/inno-status-message.tsx"],"sourcesContent":["import { InnoStatusMessageType } from './inno-status-message.api';\r\n\r\nexport interface StatusMessageTypeDetails {\r\n  readonly typeClass: string;\r\n  readonly icon: string;\r\n}\r\n\r\nconst TYPE_INFO: { [key in InnoStatusMessageType]: StatusMessageTypeDetails } = {\r\n  info: {\r\n    typeClass: 'type-info',\r\n    icon: 'information',\r\n  },\r\n  warning: {\r\n    typeClass: 'type-warning',\r\n    icon: 'warning_with_circle',\r\n  },\r\n  error: {\r\n    typeClass: 'type-error',\r\n    icon: 'error_with_circle',\r\n  },\r\n  success: {\r\n    typeClass: 'type-success',\r\n    icon: 'success_with_circle',\r\n  },\r\n};\r\n\r\n/**\r\n * Return the type information or info if not found.\r\n */\r\nexport function getDetailsForStatusMessage(type: InnoStatusMessageType) {\r\n  return TYPE_INFO[type] ?? TYPE_INFO['info'];\r\n}\r\n","@use '@innomotics/brand-experience/styles/colors' as colors;\r\n\r\n:host {\r\n  width: 500px;\r\n  height: 83px;\r\n  padding: 16px 24px 16px 24px;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  position: relative;\r\n\r\n  border-width: 1px 1px 1px 1px;\r\n  border-style: solid;\r\n\r\n  &.type-success {\r\n    &.light {\r\n      background-color: colors.$primary-300;\r\n      border-color: colors.$success-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$primary-200;\r\n      border-color: colors.$success-100;\r\n    }\r\n  }\r\n\r\n  &.type-warning {\r\n    &.light {\r\n      background-color: colors.$primary-300;\r\n      border-color: colors.$warning-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$primary-200;\r\n      border-color: colors.$warning-200;\r\n    }\r\n  }\r\n\r\n  &.type-error {\r\n    &.light {\r\n      background-color: colors.$primary-300;\r\n      border-color: colors.$error-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$primary-200;\r\n      border-color: colors.$error-100;\r\n    }\r\n  }\r\n\r\n  &.type-info {\r\n    &.light {\r\n      background-color: colors.$primary-300;\r\n      border-color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$primary-200;\r\n      border-color: colors.$primary-300;\r\n    }\r\n  }\r\n}\r\n\r\n.icon-container {\r\n  position: relative;\r\n\r\n  & > inno-icon {\r\n    position: relative;\r\n    top: -10px;\r\n    left: -11px;\r\n  }\r\n\r\n  &.type-success {\r\n    &.light {\r\n      color: colors.$success-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$success-100;\r\n    }\r\n  }\r\n\r\n  &.type-warning {\r\n    &.light {\r\n      color: colors.$warning-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$warning-200;\r\n    }\r\n  }\r\n\r\n  &.type-error {\r\n    &.light {\r\n      color: colors.$error-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$error-100;\r\n    }\r\n  }\r\n\r\n  &.type-info {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n}\r\n\r\n.message-container {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-family: 'InnomoticsHafferSQ';\r\n  overflow: hidden;\r\n\r\n  &.type-success {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-warning {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-error {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-info {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n}\r\n\r\n.close-container {\r\n  margin-left: auto;\r\n\r\n  & > inno-icon {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &.type-success {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-warning {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-error {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n\r\n  &.type-info {\r\n    &.light {\r\n      color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      color: colors.$primary-300;\r\n    }\r\n  }\r\n}\r\n\r\n.progress-bar {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  height: 5px;\r\n  width: 100%;\r\n  z-index: 1;\r\n  transform-origin: left;\r\n\r\n  &--animated {\r\n    animation: trackProgress linear 1 forwards;\r\n  }\r\n\r\n  &.type-success {\r\n    &.light {\r\n      background-color: colors.$success-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$success-100;\r\n    }\r\n  }\r\n\r\n  &.type-warning {\r\n    &.light {\r\n      background-color: colors.$warning-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$warning-200;\r\n    }\r\n  }\r\n\r\n  &.type-error {\r\n    &.light {\r\n      background-color: colors.$error-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$error-100;\r\n    }\r\n  }\r\n\r\n  &.type-info {\r\n    &.light {\r\n      background-color: colors.$primary-200;\r\n    }\r\n\r\n    &.dark {\r\n      background-color: colors.$primary-300;\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes trackProgress {\r\n  0% {\r\n    transform: scaleX(1);\r\n  }\r\n  100% {\r\n    transform: scaleX(0);\r\n  }\r\n}\r\n\r\n@keyframes statusMessageFadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.sm-fade-in {\r\n  // animation-name: statusMessageFadeIn;\r\n  // animation-duration: 3s;\r\n  // animation-fill-mode: both;\r\n  // animation-timing-function: linear;\r\n  animation: statusMessageFadeIn linear 5 forwards;\r\n}\r\n\r\n@keyframes statusMessageFadeOut {\r\n  from {\r\n    opacity: 1;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.fadeOut {\r\n  animation-name: statusMessageFadeOut;\r\n  animation-duration: 3s;\r\n  animation-fill-mode: both;\r\n}\r\n","import { Component, Element, Event, EventEmitter, Host, Prop, h, State } from '@stencil/core';\r\nimport { StatusMessageTypeDetails, getDetailsForStatusMessage } from './inno-status-message.values';\r\nimport { InnoStatusMessageTheme, InnoStatusMessageType } from './inno-status-message.api';\r\n\r\n/**\r\n * Represents a status message entry.\r\n */\r\n@Component({\r\n  tag: 'inno-status-message',\r\n  styleUrl: 'inno-status-message.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoStatusMessage {\r\n  @Element() hostElement: HTMLElement;\r\n\r\n  @State() progress = 0;\r\n  @State() touched = false;\r\n\r\n  /**\r\n   * Theme variant of the component.\r\n   */\r\n  @Prop() theme: InnoStatusMessageTheme = 'light';\r\n\r\n  /**\r\n   * Type of the status message.\r\n   */\r\n  @Prop() messageType: InnoStatusMessageType = 'info';\r\n\r\n  /**\r\n   * Autoclose message after the given delay.\r\n   * The message will be closed independently from showProgress property.\r\n   */\r\n  @Prop() autoClose = false;\r\n\r\n  /**\r\n   * Autoclose delay.\r\n   */\r\n  @Prop() autoCloseDelay = 3000;\r\n\r\n  /**\r\n   * Animate progressbar and close after animation ends.\r\n   * The message will be closed independently from autoClose property.\r\n   */\r\n  @Prop() showProgress: boolean = false;\r\n\r\n  /**\r\n   * Icon of toast\r\n   */\r\n  @Prop() icon: string;\r\n\r\n  /**\r\n   * Icon color of toast\r\n   */\r\n  @Prop() iconColor: string;\r\n\r\n  /**\r\n   * Status message is closed.\r\n   */\r\n  @Event() closeMessage: EventEmitter;\r\n\r\n  componentDidLoad() {\r\n    if (this.autoClose) {\r\n      setTimeout(() => this.closeProcess(), this.autoCloseDelay);\r\n    }\r\n  }\r\n\r\n  private themeClasses(): ThemeClasses {\r\n    return {\r\n      light: this.theme === 'light',\r\n      dark: this.theme === 'dark',\r\n    };\r\n  }\r\n\r\n  private messageTypeDetails() {\r\n    return getDetailsForStatusMessage(this.messageType);\r\n  }\r\n\r\n  private closeProcess() {\r\n    if (this.hostElement) {\r\n      this.hostElement.classList.add('fadeOut');\r\n    }\r\n    setTimeout(() => {\r\n      this.closeMessage.emit();\r\n    }, 250);\r\n  }\r\n\r\n  private messageIcon(typeInfo: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'icon-container': true,\r\n      [typeInfo.typeClass]: true,\r\n    };\r\n\r\n    const iconName = this.icon ?? typeInfo.icon;\r\n    const iconStyle = this.iconColor ? { color: this.iconColor } : {};\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <inno-icon icon={iconName} size={48} style={iconStyle}></inno-icon>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private messageContainer(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'message-container': true,\r\n      [typeDetails.typeClass]: true,\r\n    };\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <slot></slot>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private closeControl(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'close-container': true,\r\n      [typeDetails.typeClass]: true,\r\n    };\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <inno-icon icon=\"close_small\" size={32} onClick={() => this.closeMessage.emit()}></inno-icon>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private progressBar(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      [typeDetails.typeClass]: true,\r\n      'progress-bar': true,\r\n      'progress-bar--animated': this.showProgress,\r\n    };\r\n\r\n    const progressBarStyle: Record<string, string> = {\r\n      animationDuration: `${this.autoCloseDelay}ms`,\r\n      animationPlayState: this.touched ? 'paused' : 'running',\r\n    };\r\n\r\n    return (\r\n      <div\r\n        class={classes}\r\n        style={progressBarStyle}\r\n        onAnimationEnd={() => this.closeProcess()}\r\n        onTransitionEnd={() => {\r\n          if (this.progress === 0) {\r\n            this.closeProcess();\r\n          }\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const typeDetails = this.messageTypeDetails();\r\n    const themeClasses = this.themeClasses();\r\n\r\n    const hostClasses = {\r\n      ...themeClasses,\r\n      [typeDetails.typeClass]: true,\r\n      'sm-fade-in': true,\r\n    };\r\n\r\n    return (\r\n      <Host class={hostClasses} onPointerEnter={() => (this.touched = true)} onPointerLeave={() => (this.touched = false)}>\r\n        {this.messageIcon(typeDetails, themeClasses)}\r\n        {this.messageContainer(typeDetails, themeClasses)}\r\n        {this.closeControl(typeDetails, themeClasses)}\r\n        {this.progressBar(typeDetails, themeClasses)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ThemeClasses {\r\n  readonly light: boolean;\r\n  readonly dark: boolean;\r\n}\r\n"],"version":3}