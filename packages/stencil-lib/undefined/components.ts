/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type DateChange, type ExpandedChangedEvent, type InnoAccordionCustomEvent, type InnoDatePickerCustomEvent, type InnoDatePickerDropdownCustomEvent, type InnoDragAndDropCustomEvent, type InnoModalHeaderCustomEvent, type InnoPaneCustomEvent, type InnoTabItemCustomEvent, type TabClickDetail } from "@innomotics/brand-experience";
import { InnoAccordion as InnoAccordionElement, defineCustomElement as defineInnoAccordion } from "@innomotics/brand-experience/components/inno-accordion.js";
import { InnoBreadcrumbItem as InnoBreadcrumbItemElement, defineCustomElement as defineInnoBreadcrumbItem } from "@innomotics/brand-experience/components/inno-breadcrumb-item.js";
import { InnoBreadcrumb as InnoBreadcrumbElement, defineCustomElement as defineInnoBreadcrumb } from "@innomotics/brand-experience/components/inno-breadcrumb.js";
import { InnoButton as InnoButtonElement, defineCustomElement as defineInnoButton } from "@innomotics/brand-experience/components/inno-button.js";
import { InnoCheckbox as InnoCheckboxElement, defineCustomElement as defineInnoCheckbox } from "@innomotics/brand-experience/components/inno-checkbox.js";
import { InnoDatePickerDropdown as InnoDatePickerDropdownElement, defineCustomElement as defineInnoDatePickerDropdown } from "@innomotics/brand-experience/components/inno-date-picker-dropdown.js";
import { InnoDatePicker as InnoDatePickerElement, defineCustomElement as defineInnoDatePicker } from "@innomotics/brand-experience/components/inno-date-picker.js";
import { InnoDragAndDrop as InnoDragAndDropElement, defineCustomElement as defineInnoDragAndDrop } from "@innomotics/brand-experience/components/inno-drag-and-drop.js";
import { InnoError as InnoErrorElement, defineCustomElement as defineInnoError } from "@innomotics/brand-experience/components/inno-error.js";
import { InnoFooterItem as InnoFooterItemElement, defineCustomElement as defineInnoFooterItem } from "@innomotics/brand-experience/components/inno-footer-item.js";
import { InnoFooter as InnoFooterElement, defineCustomElement as defineInnoFooter } from "@innomotics/brand-experience/components/inno-footer.js";
import { InnoIcon as InnoIconElement, defineCustomElement as defineInnoIcon } from "@innomotics/brand-experience/components/inno-icon.js";
import { InnoInput as InnoInputElement, defineCustomElement as defineInnoInput } from "@innomotics/brand-experience/components/inno-input.js";
import { InnoLoader as InnoLoaderElement, defineCustomElement as defineInnoLoader } from "@innomotics/brand-experience/components/inno-loader.js";
import { InnoModalContent as InnoModalContentElement, defineCustomElement as defineInnoModalContent } from "@innomotics/brand-experience/components/inno-modal-content.js";
import { InnoModalFooter as InnoModalFooterElement, defineCustomElement as defineInnoModalFooter } from "@innomotics/brand-experience/components/inno-modal-footer.js";
import { InnoModalHeader as InnoModalHeaderElement, defineCustomElement as defineInnoModalHeader } from "@innomotics/brand-experience/components/inno-modal-header.js";
import { InnoModal as InnoModalElement, defineCustomElement as defineInnoModal } from "@innomotics/brand-experience/components/inno-modal.js";
import { InnoPaginator as InnoPaginatorElement, defineCustomElement as defineInnoPaginator } from "@innomotics/brand-experience/components/inno-paginator.js";
import { InnoPane as InnoPaneElement, defineCustomElement as defineInnoPane } from "@innomotics/brand-experience/components/inno-pane.js";
import { InnoPopover as InnoPopoverElement, defineCustomElement as defineInnoPopover } from "@innomotics/brand-experience/components/inno-popover.js";
import { InnoProgressBar as InnoProgressBarElement, defineCustomElement as defineInnoProgressBar } from "@innomotics/brand-experience/components/inno-progress-bar.js";
import { InnoRadio as InnoRadioElement, defineCustomElement as defineInnoRadio } from "@innomotics/brand-experience/components/inno-radio.js";
import { InnoSelectItem as InnoSelectItemElement, defineCustomElement as defineInnoSelectItem } from "@innomotics/brand-experience/components/inno-select-item.js";
import { InnoSelect as InnoSelectElement, defineCustomElement as defineInnoSelect } from "@innomotics/brand-experience/components/inno-select.js";
import { InnoStatusMessage as InnoStatusMessageElement, defineCustomElement as defineInnoStatusMessage } from "@innomotics/brand-experience/components/inno-status-message.js";
import { InnoTabItem as InnoTabItemElement, defineCustomElement as defineInnoTabItem } from "@innomotics/brand-experience/components/inno-tab-item.js";
import { InnoTab as InnoTabElement, defineCustomElement as defineInnoTab } from "@innomotics/brand-experience/components/inno-tab.js";
import { InnoTableBase as InnoTableBaseElement, defineCustomElement as defineInnoTableBase } from "@innomotics/brand-experience/components/inno-table-base.js";
import { InnoTimePicker as InnoTimePickerElement, defineCustomElement as defineInnoTimePicker } from "@innomotics/brand-experience/components/inno-time-picker.js";
import { InnoToggle as InnoToggleElement, defineCustomElement as defineInnoToggle } from "@innomotics/brand-experience/components/inno-toggle.js";
import type { EventName } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type InnoAccordionEvents = { onCollapsedChanged: EventName<InnoAccordionCustomEvent<{ element: HTMLInnoAccordionElement, collapsed: boolean }>> };

export const InnoAccordion = /*@__PURE__*/ createComponent<InnoAccordionElement, InnoAccordionEvents>({
    tagName: 'inno-accordion',
    elementClass: InnoAccordionElement,
    react: React,
    events: { onCollapsedChanged: 'collapsedChanged' } as InnoAccordionEvents,
    defineCustomElement: defineInnoAccordion
});

type InnoBreadcrumbEvents = { onItemClick: EventName<CustomEvent<{ itemIndex: number, label: string }>> };

export const InnoBreadcrumb = /*@__PURE__*/ createComponent<InnoBreadcrumbElement, InnoBreadcrumbEvents>({
    tagName: 'inno-breadcrumb',
    elementClass: InnoBreadcrumbElement,
    react: React,
    events: { onItemClick: 'itemClick' } as InnoBreadcrumbEvents,
    defineCustomElement: defineInnoBreadcrumb
});

type InnoBreadcrumbItemEvents = NonNullable<unknown>;

export const InnoBreadcrumbItem = /*@__PURE__*/ createComponent<InnoBreadcrumbItemElement, InnoBreadcrumbItemEvents>({
    tagName: 'inno-breadcrumb-item',
    elementClass: InnoBreadcrumbItemElement,
    react: React,
    events: {} as InnoBreadcrumbItemEvents,
    defineCustomElement: defineInnoBreadcrumbItem
});

type InnoButtonEvents = NonNullable<unknown>;

export const InnoButton = /*@__PURE__*/ createComponent<InnoButtonElement, InnoButtonEvents>({
    tagName: 'inno-button',
    elementClass: InnoButtonElement,
    react: React,
    events: {} as InnoButtonEvents,
    defineCustomElement: defineInnoButton
});

type InnoCheckboxEvents = { onValueChange: EventName<CustomEvent<boolean>> };

export const InnoCheckbox = /*@__PURE__*/ createComponent<InnoCheckboxElement, InnoCheckboxEvents>({
    tagName: 'inno-checkbox',
    elementClass: InnoCheckboxElement,
    react: React,
    events: { onValueChange: 'valueChange' } as InnoCheckboxEvents,
    defineCustomElement: defineInnoCheckbox
});

type InnoDatePickerEvents = { onDateChange: EventName<InnoDatePickerCustomEvent<DateChange>> };

export const InnoDatePicker = /*@__PURE__*/ createComponent<InnoDatePickerElement, InnoDatePickerEvents>({
    tagName: 'inno-date-picker',
    elementClass: InnoDatePickerElement,
    react: React,
    events: { onDateChange: 'dateChange' } as InnoDatePickerEvents,
    defineCustomElement: defineInnoDatePicker
});

type InnoDatePickerDropdownEvents = { onDateChange: EventName<InnoDatePickerDropdownCustomEvent<DateChange>> };

export const InnoDatePickerDropdown = /*@__PURE__*/ createComponent<InnoDatePickerDropdownElement, InnoDatePickerDropdownEvents>({
    tagName: 'inno-date-picker-dropdown',
    elementClass: InnoDatePickerDropdownElement,
    react: React,
    events: { onDateChange: 'dateChange' } as InnoDatePickerDropdownEvents,
    defineCustomElement: defineInnoDatePickerDropdown
});

type InnoDragAndDropEvents = { onFilesChanged: EventName<InnoDragAndDropCustomEvent<Array<File>>> };

export const InnoDragAndDrop = /*@__PURE__*/ createComponent<InnoDragAndDropElement, InnoDragAndDropEvents>({
    tagName: 'inno-drag-and-drop',
    elementClass: InnoDragAndDropElement,
    react: React,
    events: { onFilesChanged: 'filesChanged' } as InnoDragAndDropEvents,
    defineCustomElement: defineInnoDragAndDrop
});

type InnoErrorEvents = NonNullable<unknown>;

export const InnoError = /*@__PURE__*/ createComponent<InnoErrorElement, InnoErrorEvents>({
    tagName: 'inno-error',
    elementClass: InnoErrorElement,
    react: React,
    events: {} as InnoErrorEvents,
    defineCustomElement: defineInnoError
});

type InnoFooterEvents = NonNullable<unknown>;

export const InnoFooter = /*@__PURE__*/ createComponent<InnoFooterElement, InnoFooterEvents>({
    tagName: 'inno-footer',
    elementClass: InnoFooterElement,
    react: React,
    events: {} as InnoFooterEvents,
    defineCustomElement: defineInnoFooter
});

type InnoFooterItemEvents = NonNullable<unknown>;

export const InnoFooterItem = /*@__PURE__*/ createComponent<InnoFooterItemElement, InnoFooterItemEvents>({
    tagName: 'inno-footer-item',
    elementClass: InnoFooterItemElement,
    react: React,
    events: {} as InnoFooterItemEvents,
    defineCustomElement: defineInnoFooterItem
});

type InnoIconEvents = NonNullable<unknown>;

export const InnoIcon = /*@__PURE__*/ createComponent<InnoIconElement, InnoIconEvents>({
    tagName: 'inno-icon',
    elementClass: InnoIconElement,
    react: React,
    events: {} as InnoIconEvents,
    defineCustomElement: defineInnoIcon
});

type InnoInputEvents = { onValueChanged: EventName<CustomEvent<string | number>> };

export const InnoInput = /*@__PURE__*/ createComponent<InnoInputElement, InnoInputEvents>({
    tagName: 'inno-input',
    elementClass: InnoInputElement,
    react: React,
    events: { onValueChanged: 'valueChanged' } as InnoInputEvents,
    defineCustomElement: defineInnoInput
});

type InnoLoaderEvents = NonNullable<unknown>;

export const InnoLoader = /*@__PURE__*/ createComponent<InnoLoaderElement, InnoLoaderEvents>({
    tagName: 'inno-loader',
    elementClass: InnoLoaderElement,
    react: React,
    events: {} as InnoLoaderEvents,
    defineCustomElement: defineInnoLoader
});

type InnoModalEvents = {
    onDialogClose: EventName<CustomEvent<any>>,
    onDialogDismiss: EventName<CustomEvent<any>>
};

export const InnoModal = /*@__PURE__*/ createComponent<InnoModalElement, InnoModalEvents>({
    tagName: 'inno-modal',
    elementClass: InnoModalElement,
    react: React,
    events: {
        onDialogClose: 'dialogClose',
        onDialogDismiss: 'dialogDismiss'
    } as InnoModalEvents,
    defineCustomElement: defineInnoModal
});

type InnoModalContentEvents = NonNullable<unknown>;

export const InnoModalContent = /*@__PURE__*/ createComponent<InnoModalContentElement, InnoModalContentEvents>({
    tagName: 'inno-modal-content',
    elementClass: InnoModalContentElement,
    react: React,
    events: {} as InnoModalContentEvents,
    defineCustomElement: defineInnoModalContent
});

type InnoModalFooterEvents = NonNullable<unknown>;

export const InnoModalFooter = /*@__PURE__*/ createComponent<InnoModalFooterElement, InnoModalFooterEvents>({
    tagName: 'inno-modal-footer',
    elementClass: InnoModalFooterElement,
    react: React,
    events: {} as InnoModalFooterEvents,
    defineCustomElement: defineInnoModalFooter
});

type InnoModalHeaderEvents = { onCloseClick: EventName<InnoModalHeaderCustomEvent<Event>> };

export const InnoModalHeader = /*@__PURE__*/ createComponent<InnoModalHeaderElement, InnoModalHeaderEvents>({
    tagName: 'inno-modal-header',
    elementClass: InnoModalHeaderElement,
    react: React,
    events: { onCloseClick: 'closeClick' } as InnoModalHeaderEvents,
    defineCustomElement: defineInnoModalHeader
});

type InnoPaginatorEvents = {
    onPageSelected: EventName<CustomEvent<number>>,
    onItemCountChanged: EventName<CustomEvent<number>>
};

export const InnoPaginator = /*@__PURE__*/ createComponent<InnoPaginatorElement, InnoPaginatorEvents>({
    tagName: 'inno-paginator',
    elementClass: InnoPaginatorElement,
    react: React,
    events: {
        onPageSelected: 'pageSelected',
        onItemCountChanged: 'itemCountChanged'
    } as InnoPaginatorEvents,
    defineCustomElement: defineInnoPaginator
});

type InnoPaneEvents = { onExpandedChanged: EventName<InnoPaneCustomEvent<ExpandedChangedEvent>> };

export const InnoPane = /*@__PURE__*/ createComponent<InnoPaneElement, InnoPaneEvents>({
    tagName: 'inno-pane',
    elementClass: InnoPaneElement,
    react: React,
    events: { onExpandedChanged: 'expandedChanged' } as InnoPaneEvents,
    defineCustomElement: defineInnoPane
});

type InnoPopoverEvents = {
    onInnoPopoverShown: EventName<CustomEvent<void>>,
    onInnoPopoverHidden: EventName<CustomEvent<void>>
};

export const InnoPopover = /*@__PURE__*/ createComponent<InnoPopoverElement, InnoPopoverEvents>({
    tagName: 'inno-popover',
    elementClass: InnoPopoverElement,
    react: React,
    events: {
        onInnoPopoverShown: 'innoPopoverShown',
        onInnoPopoverHidden: 'innoPopoverHidden'
    } as InnoPopoverEvents,
    defineCustomElement: defineInnoPopover
});

type InnoProgressBarEvents = NonNullable<unknown>;

export const InnoProgressBar = /*@__PURE__*/ createComponent<InnoProgressBarElement, InnoProgressBarEvents>({
    tagName: 'inno-progress-bar',
    elementClass: InnoProgressBarElement,
    react: React,
    events: {} as InnoProgressBarEvents,
    defineCustomElement: defineInnoProgressBar
});

type InnoRadioEvents = { onValueChange: EventName<CustomEvent<string>> };

export const InnoRadio = /*@__PURE__*/ createComponent<InnoRadioElement, InnoRadioEvents>({
    tagName: 'inno-radio',
    elementClass: InnoRadioElement,
    react: React,
    events: { onValueChange: 'valueChange' } as InnoRadioEvents,
    defineCustomElement: defineInnoRadio
});

type InnoSelectEvents = {
    onValueChanged: EventName<CustomEvent<string>>,
    onItemIsFavorited: EventName<CustomEvent<any>>,
    onItemIsUnfavorited: EventName<CustomEvent<any>>,
    onFavoriteItemsChanged: EventName<CustomEvent<any>>,
    onDropdownClosed: EventName<CustomEvent<void>>
};

export const InnoSelect = /*@__PURE__*/ createComponent<InnoSelectElement, InnoSelectEvents>({
    tagName: 'inno-select',
    elementClass: InnoSelectElement,
    react: React,
    events: {
        onValueChanged: 'valueChanged',
        onItemIsFavorited: 'itemIsFavorited',
        onItemIsUnfavorited: 'itemIsUnfavorited',
        onFavoriteItemsChanged: 'favoriteItemsChanged',
        onDropdownClosed: 'dropdownClosed'
    } as InnoSelectEvents,
    defineCustomElement: defineInnoSelect
});

type InnoSelectItemEvents = {
    onItemSelected: EventName<CustomEvent<any>>,
    onItemFavorited: EventName<CustomEvent<any>>,
    onItemUnfavorited: EventName<CustomEvent<any>>,
    onItemLabelChanged: EventName<CustomEvent<any>>
};

export const InnoSelectItem = /*@__PURE__*/ createComponent<InnoSelectItemElement, InnoSelectItemEvents>({
    tagName: 'inno-select-item',
    elementClass: InnoSelectItemElement,
    react: React,
    events: {
        onItemSelected: 'itemSelected',
        onItemFavorited: 'itemFavorited',
        onItemUnfavorited: 'itemUnfavorited',
        onItemLabelChanged: 'itemLabelChanged'
    } as InnoSelectItemEvents,
    defineCustomElement: defineInnoSelectItem
});

type InnoStatusMessageEvents = { onCloseMessage: EventName<CustomEvent<any>> };

export const InnoStatusMessage = /*@__PURE__*/ createComponent<InnoStatusMessageElement, InnoStatusMessageEvents>({
    tagName: 'inno-status-message',
    elementClass: InnoStatusMessageElement,
    react: React,
    events: { onCloseMessage: 'closeMessage' } as InnoStatusMessageEvents,
    defineCustomElement: defineInnoStatusMessage
});

type InnoTabEvents = { onSelectedChange: EventName<CustomEvent<number>> };

export const InnoTab = /*@__PURE__*/ createComponent<InnoTabElement, InnoTabEvents>({
    tagName: 'inno-tab',
    elementClass: InnoTabElement,
    react: React,
    events: { onSelectedChange: 'selectedChange' } as InnoTabEvents,
    defineCustomElement: defineInnoTab
});

type InnoTabItemEvents = { onTabClick: EventName<InnoTabItemCustomEvent<TabClickDetail>> };

export const InnoTabItem = /*@__PURE__*/ createComponent<InnoTabItemElement, InnoTabItemEvents>({
    tagName: 'inno-tab-item',
    elementClass: InnoTabItemElement,
    react: React,
    events: { onTabClick: 'tabClick' } as InnoTabItemEvents,
    defineCustomElement: defineInnoTabItem
});

type InnoTableBaseEvents = NonNullable<unknown>;

export const InnoTableBase = /*@__PURE__*/ createComponent<InnoTableBaseElement, InnoTableBaseEvents>({
    tagName: 'inno-table-base',
    elementClass: InnoTableBaseElement,
    react: React,
    events: {} as InnoTableBaseEvents,
    defineCustomElement: defineInnoTableBase
});

type InnoTimePickerEvents = { onValueChange: EventName<CustomEvent<any>> };

export const InnoTimePicker = /*@__PURE__*/ createComponent<InnoTimePickerElement, InnoTimePickerEvents>({
    tagName: 'inno-time-picker',
    elementClass: InnoTimePickerElement,
    react: React,
    events: { onValueChange: 'valueChange' } as InnoTimePickerEvents,
    defineCustomElement: defineInnoTimePicker
});

type InnoToggleEvents = { onCheckedChange: EventName<CustomEvent<boolean>> };

export const InnoToggle = /*@__PURE__*/ createComponent<InnoToggleElement, InnoToggleEvents>({
    tagName: 'inno-toggle',
    elementClass: InnoToggleElement,
    react: React,
    events: { onCheckedChange: 'checkedChange' } as InnoToggleEvents,
    defineCustomElement: defineInnoToggle
});
