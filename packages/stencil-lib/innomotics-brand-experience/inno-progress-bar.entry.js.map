{"file":"inno-progress-bar.entry.esm.js","mappings":";;AAAA,MAAM,kBAAkB,GAAG,k7nEAAk7nE;;MCOh8nE,eAAe;;;uBAK2B,OAAO;4BAKZ,EAAE;kCAKI,CAAC;8BAKJ,IAAI;mCAKA,CAAC;8BAQL,KAAK;;IAEhD,aAAa,CAAiB;IAGtC,sBAAsB,CAAC,QAAgB;QACrC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KAC5B;IAED,gBAAgB;QACd,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;KAC1C;IAEO,WAAW,CAAC,QAAgB;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,WAAW,GAAW,eAAe,QAAQ,IAAI,CAAC;QACtD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;QAChD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,WAAW,CAAC;KAC7D;IAEO,WAAW;QACjB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAClE;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACnE;KACF;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,kBAAkB,GAAG,CAAC,EAAE;YAC/B,MAAM,sDAAsD,IAAI,CAAC,kBAAkB,EAAE,CAAC;SACvF;aAAM,IAAI,IAAI,CAAC,kBAAkB,GAAG,GAAG,EAAE;YACxC,MAAM,uDAAuD,IAAI,CAAC,kBAAkB,EAAE,CAAC;SACxF;QAED,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE;YAChC,MAAM,uDAAuD,IAAI,CAAC,mBAAmB,EAAE,CAAC;SACzF;KACF;IAEO,YAAY;QAClB,IAAI,kBAAkB,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC;QAElD,QACE,WAAK,KAAK,EAAC,yBAAyB,IACjC,IAAI,CAAC,cAAc,GAAG,WAAK,KAAK,EAAC,YAAY,IAAE,kBAAkB,CAAO,GAAG,IAAI,EAChF,WAAK,KAAK,EAAC,eAAe,IAAE,IAAI,CAAC,YAAY,CAAO,CAChD,EACN;KACH;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,4DAAK,KAAK,EAAC,wBAAwB,IACjC,4DAAK,KAAK,EACR;gBACE,YAAY,EAAE,IAAI;gBAClB,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;gBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;aAChC,IACA,IAAI,CAAC,YAAY,EAAE,CAAO,EAC7B,4DAAK,KAAK,EACR;gBACE,aAAa,EAAE,IAAI;gBACnB,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;gBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;aAChC,EACD,GAAG,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,IAAG,IAAI,CAAC,YAAY,EAAE,CAAO,CACnE,CACA,EACR;KACH;;;;;;;;;","names":[],"sources":["src/components/inno-progress-bar/inno-progress-bar.scss?tag=inno-progress-bar&encapsulation=scoped","src/components/inno-progress-bar/inno-progress-bar.tsx"],"sourcesContent":["@use '@innomotics/brand-experience/styles/base';\r\n@use '@innomotics/brand-experience/styles/colors';\r\n\r\n:host {\r\n  display: block;\r\n\r\n  @mixin dimensions() {\r\n    width: 100%;\r\n    height: 32px;\r\n    min-height: 32px;\r\n    max-height: 32px;\r\n  }\r\n\r\n  .progress-bar-container {\r\n    display: block;\r\n    position: relative;\r\n    @include dimensions();\r\n\r\n    .back-layer {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      font-size: 14px;\r\n      @include dimensions();\r\n\r\n      &.light {\r\n        color: colors.$primary-200;\r\n        background-color: colors.$primary-100;\r\n      }\r\n\r\n      &.dark {\r\n        color: colors.$primary-100;\r\n        background-color: colors.$primary-200;\r\n      }\r\n    }\r\n\r\n    .front-layer {\r\n      position: absolute;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      left: 0;\r\n      right: 0;\r\n      top: 0;\r\n      bottom: 0;\r\n      font-size: 14px;\r\n      clip-path: inset(0 0 0 0%);\r\n      -webkit-clip-path: inset(0 0 0 0%);\r\n      transition: clip-path 0.3s cubic-bezier(0.84, 0, 0.58, 1);\r\n      @include dimensions();\r\n\r\n      &.light {\r\n        color: colors.$primary-300;\r\n        background-color: colors.$secondary-800;\r\n      }\r\n\r\n      &.dark {\r\n        color: colors.$primary-200;\r\n        background-color: colors.$secondary-200;\r\n      }\r\n    }\r\n\r\n    .back-layer>.progress-text-container,\r\n    .front-layer>.progress-text-container {\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: center;\r\n      align-items: center;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      padding: 0px 12px 0px 12px;\r\n\r\n      .percentage {\r\n        font-weight: bold;\r\n        margin-right: 5px;\r\n      }\r\n\r\n      .progress-text {\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n      }\r\n    }\r\n  }\r\n}","import { Component, Host, Prop, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-progress-bar',\r\n  styleUrl: 'inno-progress-bar.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoProgressBar {\r\n\r\n  /**\r\n   * Color variant of the progress bar.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * Text to display for the progress bar.\r\n   */\r\n  @Prop({ mutable: true }) progressText: string = '';\r\n\r\n  /**\r\n   * Progress in percentage. Must be a number between 0 and 100.\r\n   */\r\n  @Prop({ mutable: true }) progressPercentage: number = 0;\r\n\r\n  /**\r\n   * Show the percentage number on the progress bar. The value is rounded according to the 'percentagePrecision' and 'trailingZeroes' properties.\r\n   */\r\n  @Prop({ mutable: true }) showPercentage: boolean = true;\r\n\r\n  /**\r\n   * If the percentage number is shown, how many decimal places should be visible\r\n   */\r\n  @Prop({ mutable: true }) percentagePrecision: number = 0;\r\n\r\n  /**\r\n   * If 'percentagePrecision' is larger than 0, should we display the trailing zeroes.\r\n   * For example if the progress is 1.5% and the 'percentagePrecision' is 2 then the displayed text will be '1.50%' \r\n   * if trailing zeroes are enabled and '1.5%' if trailing zeroes are disabled.\r\n   * Uses the toFixed(..) function in the background.\r\n   */\r\n  @Prop({ mutable: true }) trailingZeroes: boolean = false;\r\n\r\n  private frontLayerRef: HTMLDivElement;\r\n\r\n  @Watch('progressPercentage')\r\n  progressChangedhandler(newValue: number): void {\r\n    this.setClipPath(newValue);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.setClipPath(this.progressPercentage)\r\n  }\r\n\r\n  private setClipPath(newValue: number): void {\r\n    this.validateProps();\r\n\r\n    let newClipPath: string = `inset(0 0 0 ${newValue}%)`;\r\n    this.frontLayerRef.style.clipPath = newClipPath;\r\n    this.frontLayerRef.style['-webkit-clip-path'] = newClipPath;\r\n  }\r\n\r\n  private progressNum(): string | number {\r\n    this.validateProps();\r\n\r\n    if (this.trailingZeroes) {\r\n      return this.progressPercentage.toFixed(this.percentagePrecision);\r\n    } else {\r\n      return +this.progressPercentage.toFixed(this.percentagePrecision);\r\n    }\r\n  }\r\n\r\n  private validateProps(): void {\r\n    if (this.progressPercentage < 0) {\r\n      throw `progressPercentage is smaller than 0! The value is ${this.progressPercentage}`;\r\n    } else if (this.progressPercentage > 100) {\r\n      throw `progressPercentage is larger than 100! The value is ${this.progressPercentage}`;\r\n    }\r\n\r\n    if (this.percentagePrecision < 0) {\r\n      throw `percentagePrecision is smaller than 0! The value is ${this.percentagePrecision}`;\r\n    }\r\n  }\r\n\r\n  private progressHtml() {\r\n    let progressPercentage = `${this.progressNum()}%`;\r\n\r\n    return (\r\n      <div class=\"progress-text-container\">\r\n        {this.showPercentage ? <div class=\"percentage\">{progressPercentage}</div> : null}\r\n        <div class=\"progress-text\">{this.progressText}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"progress-bar-container\">\r\n          <div class={\r\n            {\r\n              'back-layer': true,\r\n              'light': this.variant === 'light',\r\n              'dark': this.variant === 'dark',\r\n            }\r\n          }>{this.progressHtml()}</div>\r\n          <div class={\r\n            {\r\n              'front-layer': true,\r\n              'light': this.variant === 'light',\r\n              'dark': this.variant === 'dark',\r\n            }\r\n          } ref={(ref) => (this.frontLayerRef = ref)}>{this.progressHtml()}</div>\r\n        </div>\r\n      </Host >\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}