{"version":3,"names":["DefaultFrameworkDelegate","attachView","view","config","attachToElement","parentElement","document","body","appendChild","removeView","remove","coreDelegate","currentDelegate","registerFrameworkDelegate","delegate","resolveDelegate","getCoreDelegate","setA11yAttributes","element","ariaDescribedby","ariaLabelledby","setAttribute","getInnoModal","closest","closeModal","closeResult","dialog","dismissModal","dismissResult","async","showModal","dialogRef","onClose","TypedEvent","onDismiss","content","createElement","innerText","HTMLElement","tagName","Object","assign","addEventListener","detail","emit","htmlElement","getStatusMessageContainer","containerList","Array","from","querySelectorAll","container","length","console","warn","statusMessageContainer","setStatusMessagePosition","position","statusMessage","showStatusMessage","info","type","error","success","warning"],"sources":["src/utils/delegate.ts","src/components/inno-modal/inno-modal.api.ts","src/components/inno-status-message/inno-status-message.api.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Copied from the the original Siemens IX library.\r\n/// Represents an abstraction how to add the view to the different containers.\r\n/// The default delegator uses the HTML DOM API to attach the element to the DOM tree.\r\n///\r\n/// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/delegate.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type DelegateConfig = {\r\n  parentElement?: Element;\r\n};\r\n\r\nexport interface FrameworkDelegate {\r\n  attachView<R = HTMLElement>(view: any, config?: DelegateConfig): Promise<R>;\r\n  removeView(view: any): Promise<void>;\r\n}\r\n\r\nclass DefaultFrameworkDelegate implements FrameworkDelegate {\r\n  async attachView<R = HTMLElement>(view: any, config?: DelegateConfig): Promise<R> {\r\n    const attachToElement = config?.parentElement ?? document.body;\r\n    attachToElement.appendChild(view);\r\n    return view;\r\n  }\r\n\r\n  async removeView(view: any) {\r\n    view.remove();\r\n  }\r\n}\r\n\r\nconst coreDelegate = new DefaultFrameworkDelegate();\r\nlet currentDelegate: FrameworkDelegate = coreDelegate;\r\n\r\nexport function registerFrameworkDelegate(delegate: FrameworkDelegate) {\r\n  currentDelegate = delegate;\r\n}\r\n\r\nexport const resolveDelegate = () => {\r\n  return currentDelegate;\r\n};\r\n\r\nexport const getCoreDelegate = () => coreDelegate;\r\n","////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Copied from the the original Siemens IX library.\r\n/// Modified for the Innomotics project.\r\n/// Provides a publicly available API to manage the modal functionality.\r\n///\r\n/// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/modal/modal.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { InnoModalSize } from './inno-modal.model';\r\nimport { getCoreDelegate, resolveDelegate } from '../../utils/delegate';\r\nimport { TypedEvent } from '../../utils/typed-event';\r\n\r\n/**\r\n * Modal instance configuration.\r\n */\r\nexport interface ModalConfig<CONTENT = any> {\r\n  animation?: boolean;\r\n  ariaDescribedby?: string;\r\n  ariaLabelledby?: string;\r\n  backdrop?: boolean;\r\n  closeOnBackdropClick?: boolean;\r\n  closeOnEscape?: boolean;\r\n  centered?: boolean;\r\n  container?: string | HTMLElement;\r\n  content: CONTENT | string;\r\n  fixed?: boolean;\r\n  size?: InnoModalSize;\r\n}\r\n\r\n/**\r\n * Reference to the opened modal instance.\r\n */\r\nexport interface ModalInstance<TReason = any> {\r\n  htmlElement: HTMLInnoModalElement;\r\n  onClose: TypedEvent<TReason>;\r\n  onDismiss: TypedEvent<TReason>;\r\n}\r\n\r\nexport function setA11yAttributes(element: HTMLElement, config: ModalConfig) {\r\n  const ariaDescribedby = config.ariaDescribedby;\r\n  const ariaLabelledby = config.ariaLabelledby;\r\n\r\n  delete config['ariaDescribedby'];\r\n  delete config['ariaLabelledby'];\r\n\r\n  if (ariaDescribedby) {\r\n    element.setAttribute('aria-describedby', ariaDescribedby);\r\n  }\r\n\r\n  if (ariaLabelledby) {\r\n    element.setAttribute('aria-labelledby', ariaLabelledby);\r\n  }\r\n}\r\n\r\nfunction getInnoModal(element: Element): HTMLInnoModalElement {\r\n  return element.closest('inno-modal');\r\n}\r\n\r\nexport function closeModal<TClose = any>(element: Element, closeResult: TClose) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.closeModal(closeResult);\r\n  }\r\n}\r\n\r\nexport function dismissModal(element: Element, dismissResult?: any) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.dismissModal(dismissResult);\r\n  }\r\n}\r\n\r\nexport async function showModal<T>(config: ModalConfig<T>): Promise<ModalInstance<T>> {\r\n  const delegate = resolveDelegate();\r\n  let dialogRef: HTMLInnoModalElement;\r\n  const onClose = new TypedEvent<T>();\r\n  const onDismiss = new TypedEvent<T>();\r\n\r\n  // Direct string content to load inticator content\r\n  if (typeof config.content === 'string') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.innerText = config.content;\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Provided only the body of the modal\r\n  if (config.content instanceof HTMLElement && config.content.tagName !== 'INNO-MODAL') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.appendChild(config.content);\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Full inno-modal content is provided\r\n  if (!dialogRef) {\r\n    dialogRef = await delegate.attachView<HTMLInnoModalElement>(config.content);\r\n  }\r\n\r\n  setA11yAttributes(dialogRef, config);\r\n  Object.assign(dialogRef, config);\r\n\r\n  await dialogRef.showModal();\r\n\r\n  dialogRef.addEventListener('dialogClose', async ({ detail }: CustomEvent) => {\r\n    onClose.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n  dialogRef.addEventListener('dialogDismiss', async ({ detail }: CustomEvent) => {\r\n    onDismiss.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n\r\n  return {\r\n    htmlElement: dialogRef,\r\n    onClose,\r\n    onDismiss,\r\n  };\r\n}\r\n","import { TypedEvent } from '../../utils/typed-event';\r\nimport { InnoStatusMessageContainer } from '../inno-status-message-container/inno-status-message-container';\r\n\r\n/**\r\n * Type of the status messages.\r\n */\r\nexport type InnoStatusMessageType = 'info' | 'success' | 'warning' | 'error';\r\n\r\n/**\r\n * Position of the status messages.\r\n */\r\nexport type InnoStatusMessagePosition = 'top-right' | 'bottom-right' | 'bottom-left' | 'top-left';\r\n\r\n/**\r\n * Available status message theme.\r\n */\r\nexport type InnoStatusMessageTheme = 'light' | 'dark';\r\n\r\n/**\r\n * Status message configuration.\r\n */\r\nexport interface InnoStatusMessageConfig {\r\n  /**\r\n   * Content of the status message.\r\n   */\r\n  message: string | HTMLElement;\r\n\r\n  /**\r\n   * Type of the message.\r\n   */\r\n  type?: InnoStatusMessageType;\r\n\r\n  /**\r\n   * Theme of the message.\r\n   */\r\n  theme?: InnoStatusMessageTheme;\r\n\r\n  /**\r\n   * Should close the message automatically.\r\n   */\r\n  autoClose?: boolean;\r\n\r\n  /**\r\n   * When to close the message.\r\n   * Applied to the autoClose and showProgress properties.\r\n   */\r\n  autoCloseDelay?: number;\r\n\r\n  /**\r\n   * Show the progress bar.\r\n   */\r\n  showProgress?: boolean;\r\n\r\n  /**\r\n   * Override the icon.\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * Override the color of the icon.\r\n   */\r\n  iconColor?: string;\r\n\r\n  /**\r\n   * Position of the message on the screen.\r\n   */\r\n  position?: InnoStatusMessagePosition;\r\n}\r\n\r\n/**\r\n * Reference to the opened message.\r\n */\r\nexport type ShowStatusMessageResult = {\r\n  onClose: TypedEvent<any | undefined>;\r\n  close: (result?: any) => void;\r\n};\r\n\r\nexport function getStatusMessageContainer(): HTMLElement & InnoStatusMessageContainer {\r\n  const containerList = Array.from(document.querySelectorAll('inno-status-message-container'));\r\n  const [container] = containerList;\r\n\r\n  if (containerList.length > 1) {\r\n    console.warn('Multiple toast containers were found. Only the first one will be used.');\r\n    return container as any;\r\n  }\r\n\r\n  if (!container) {\r\n    const statusMessageContainer = document.createElement('inno-status-message-container');\r\n    document.body.appendChild(statusMessageContainer);\r\n    return statusMessageContainer as any;\r\n  }\r\n\r\n  return container as any;\r\n}\r\n\r\nexport function setStatusMessagePosition(position: InnoStatusMessagePosition) {\r\n  const container = getStatusMessageContainer();\r\n  container.position = position;\r\n}\r\n\r\nfunction statusMessage(config: InnoStatusMessageConfig): Promise<ShowStatusMessageResult> {\r\n  const container = getStatusMessageContainer();\r\n  return container.showStatusMessage(config);\r\n}\r\n\r\nstatusMessage.info = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'info',\r\n  });\r\n};\r\n\r\nstatusMessage.error = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'error',\r\n  });\r\n};\r\n\r\nstatusMessage.success = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'success',\r\n  });\r\n};\r\n\r\nstatusMessage.warning = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'warning',\r\n  });\r\n};\r\n\r\nexport { statusMessage };\r\n"],"mappings":"oCAiBA,MAAMA,EACJ,gBAAMC,CAA4BC,EAAWC,GAC3C,MAAMC,EAAkBD,GAAQE,eAAiBC,SAASC,KAC1DH,EAAgBI,YAAYN,GAC5B,OAAOA,C,CAGT,gBAAMO,CAAWP,GACfA,EAAKQ,Q,EAIT,MAAMC,EAAe,IAAIX,EACzB,IAAIY,EAAqCD,E,SAEzBE,EAA0BC,GACxCF,EAAkBE,CACpB,C,MAEaC,EAAkB,IACtBH,E,MAGII,EAAkB,IAAML,E,SCFrBM,EAAkBC,EAAsBf,GACtD,MAAMgB,EAAkBhB,EAAOgB,gBAC/B,MAAMC,EAAiBjB,EAAOiB,sBAEvBjB,EAAO,0BACPA,EAAO,kBAEd,GAAIgB,EAAiB,CACnBD,EAAQG,aAAa,mBAAoBF,E,CAG3C,GAAIC,EAAgB,CAClBF,EAAQG,aAAa,kBAAmBD,E,CAE5C,CAEA,SAASE,EAAaJ,GACpB,OAAOA,EAAQK,QAAQ,aACzB,C,SAEgBC,EAAyBN,EAAkBO,GACzD,MAAMC,EAASJ,EAAaJ,GAC5B,GAAIQ,EAAQ,CACVA,EAAOF,WAAWC,E,CAEtB,C,SAEgBE,EAAaT,EAAkBU,GAC7C,MAAMF,EAASJ,EAAaJ,GAC5B,GAAIQ,EAAQ,CACVA,EAAOC,aAAaC,E,CAExB,CAEOC,eAAeC,EAAa3B,GACjC,MAAMW,EAAWC,IACjB,IAAIgB,EACJ,MAAMC,EAAU,IAAIC,EACpB,MAAMC,EAAY,IAAID,EAGtB,UAAW9B,EAAOgC,UAAY,SAAU,CACtC,MAAMT,EAASpB,SAAS8B,cAAc,cACtCV,EAAOW,UAAYlC,EAAOgC,QAC1BJ,QAAkBf,IAAkBf,WAAWyB,E,CAIjD,GAAIvB,EAAOgC,mBAAmBG,aAAenC,EAAOgC,QAAQI,UAAY,aAAc,CACpF,MAAMb,EAASpB,SAAS8B,cAAc,cACtCV,EAAOlB,YAAYL,EAAOgC,SAC1BJ,QAAkBf,IAAkBf,WAAWyB,E,CAIjD,IAAKK,EAAW,CACdA,QAAkBjB,EAASb,WAAiCE,EAAOgC,Q,CAGrElB,EAAkBc,EAAW5B,GAC7BqC,OAAOC,OAAOV,EAAW5B,SAEnB4B,EAAUD,YAEhBC,EAAUW,iBAAiB,eAAeb,OAASc,aACjDX,EAAQY,KAAKD,SACP7B,EAASL,WAAWsB,EAAU,IAEtCA,EAAUW,iBAAiB,iBAAiBb,OAASc,aACnDT,EAAUU,KAAKD,SACT7B,EAASL,WAAWsB,EAAU,IAGtC,MAAO,CACLc,YAAad,EACbC,UACAE,YAEJ,C,SCvCgBY,IACd,MAAMC,EAAgBC,MAAMC,KAAK3C,SAAS4C,iBAAiB,kCAC3D,MAAOC,GAAaJ,EAEpB,GAAIA,EAAcK,OAAS,EAAG,CAC5BC,QAAQC,KAAK,0EACb,OAAOH,C,CAGT,IAAKA,EAAW,CACd,MAAMI,EAAyBjD,SAAS8B,cAAc,iCACtD9B,SAASC,KAAKC,YAAY+C,GAC1B,OAAOA,C,CAGT,OAAOJ,CACT,C,SAEgBK,EAAyBC,GACvC,MAAMN,EAAYL,IAClBK,EAAUM,SAAWA,CACvB,CAEA,SAASC,EAAcvD,GACrB,MAAMgD,EAAYL,IAClB,OAAOK,EAAUQ,kBAAkBxD,EACrC,CAEAuD,EAAcE,KAAQzD,GACbuD,EAAc,IAChBvD,EACH0D,KAAM,SAIVH,EAAcI,MAAS3D,GACduD,EAAc,IAChBvD,EACH0D,KAAM,UAIVH,EAAcK,QAAW5D,GAChBuD,EAAc,IAChBvD,EACH0D,KAAM,YAIVH,EAAcM,QAAW7D,GAChBuD,EAAc,IAChBvD,EACH0D,KAAM,mB","ignoreList":[]}