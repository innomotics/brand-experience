{"file":"inno-toggle.js","mappings":";;;AAAA,MAAM,aAAa,GAAG,21EAA21E,CAAC;AACl3E,yBAAe,aAAa;;MCOfA,YAAU;;;;;;;;;;IAMmB,OAAO,GAAY,KAAK,CAAC;;;;IAKxC,QAAQ,GAAY,KAAK,CAAC;;;;IAK1B,OAAO,GAAqB,MAAM,CAAC;;;;IAKnC,MAAM,GAAW,CAAC,CAAC;;;;IAKnC,aAAa,CAAwB;IAE9C,eAAe,CAAC,UAAmB;QACjC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;KAC3B;IAGD,oBAAoB,CAAC,QAAiB,EAAE,QAAiB;QACvD,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvC;KACF;IAED,MAAM;QACJ,QACE,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,EACD,OAAO,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAElD,8DACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAC1C,IAAI,EAAC,UAAU,kBACD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,CAAC,KAAK,KACd,IAAI,CAAC,eAAe,CAAE,KAAK,CAAC,MAAc,CAAC,OAAO,CAAC,GAE9C,EACT,8DAAO,KAAK,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,CAAC,IAChC,6DACE,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;gBAC/B,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;aAClC,GACI,CACD,CACH,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["InnoToggle"],"sources":["src/components/inno-toggle/inno-toggle.scss?tag=inno-toggle&encapsulation=scoped","src/components/inno-toggle/inno-toggle.tsx"],"sourcesContent":["@use '@innomotics/brand-experience/styles/colors';\r\n\r\n:host {\r\n  display: inline-flex;\r\n  position: relative;\r\n  height: 24px;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 48px;\r\n    min-width: 48px;\r\n    max-width: 48px;\r\n    height: 20px;\r\n  }\r\n\r\n  .switch input {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  .slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    transition: all 300ms cubic-bezier(0.84, 0, 0.58, 1);\r\n    border-radius: 14px;\r\n\r\n    &.dark {\r\n      background-color: colors.$secondary-200;\r\n    }\r\n\r\n    &.light {\r\n      background-color: colors.$secondary-800;\r\n    }\r\n  }\r\n\r\n  .slider::before {\r\n    position: absolute;\r\n    content: '';\r\n    height: 24px;\r\n    width: 24px;\r\n    left: -2px;\r\n    bottom: -2px;\r\n    background-color: colors.$primary-300;\r\n    box-shadow: 0px 0px 3px 0px #08191F66;\r\n    transition: all 300ms cubic-bezier(0.84, 0, 0.58, 1);\r\n    border-radius: 50%;\r\n  }\r\n\r\n  input {\r\n    border: 0;\r\n    clip: rect(0 0 0 0);\r\n    height: 1px;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute;\r\n    width: 1px;\r\n  }\r\n\r\n  input:focus-visible+.switch>.slider {\r\n    outline: 2px solid colors.$focus-100;\r\n    outline-offset: 5px;\r\n  }\r\n\r\n  input:checked+.switch>.slider {\r\n    &.dark {\r\n      background-color: colors.$primary-200;\r\n    }\r\n\r\n    &.light {\r\n      background-color: colors.$primary-100;\r\n    }\r\n  }\r\n\r\n  input:checked+.switch>.slider::before {\r\n    transform: translateX(28px);\r\n  }\r\n\r\n  input+.switch:hover>.slider {\r\n    &.dark {\r\n      background-color: colors.$secondary-800;\r\n    }\r\n\r\n    &.light {\r\n      background-color: colors.$secondary-300;\r\n    }\r\n  }\r\n}\r\n\r\n:host(.disabled) {\r\n  pointer-events: none;\r\n\r\n  input+.switch>.slider {\r\n    &.dark {\r\n      background-color: colors.$secondary-200;\r\n    }\r\n\r\n    &.light {\r\n      background-color: colors.$secondary-800;\r\n    }\r\n  }\r\n\r\n  input+.switch>.slider::before {\r\n    background-color: colors.$secondary-400;\r\n  }\r\n}","import { Component, Element, Event, EventEmitter, Host, h, Prop, Watch } from '@stencil/core';\r\nimport { a11yBoolean } from '../../utils/a11y';\r\n\r\n@Component({\r\n  tag: 'inno-toggle',\r\n  styleUrl: 'inno-toggle.scss',\r\n  scoped: true\r\n})\r\nexport class InnoToggle {\r\n  @Element() hostElement!: HTMLInnoToggleElement;\r\n\r\n  /**\r\n   * Whether the slide-toggle element is checked or not. Can be changed programatically, will emit a change event.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the slide-toggle element is disabled or not.\r\n   */\r\n  @Prop({ mutable: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * Color variant of the toggle component.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'dark' | 'light' = 'dark';\r\n\r\n  /**\r\n   * The tab index of the toggle\r\n   */\r\n  @Prop({ mutable: true }) tabIdx: number = 0;\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle changes its value.\r\n   */\r\n  @Event() checkedChange: EventEmitter<boolean>;\r\n\r\n  onCheckedChange(newChecked: boolean) {\r\n    this.checked = newChecked;\r\n  }\r\n\r\n  @Watch('checked')\r\n  checkedChangeHandler(newValue: boolean, oldValue: boolean) {\r\n    if (newValue !== oldValue) {\r\n      this.checkedChange.emit(this.checked);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          disabled: this.disabled\r\n        }}\r\n        onClick={() => this.onCheckedChange(!this.checked)}\r\n      >\r\n        <input\r\n          disabled={this.disabled}\r\n          checked={this.checked}\r\n          role=\"switch\"\r\n          tabindex={this.disabled ? -1 : this.tabIdx}\r\n          type=\"checkbox\"\r\n          aria-checked={a11yBoolean(this.checked)}\r\n          onChange={(event) =>\r\n            this.onCheckedChange((event.target as any).checked)\r\n          }\r\n        ></input>\r\n        <label class=\"switch\" tabIndex={-1}>\r\n          <span\r\n            class={{\r\n              \"slider\": true,\r\n              \"dark\": this.variant === \"dark\",\r\n              \"light\": this.variant === \"light\"\r\n            }}>\r\n          </span>\r\n        </label>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}