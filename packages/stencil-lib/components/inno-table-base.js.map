{"file":"inno-table-base.js","mappings":"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","names":["InnoTableBase"],"sources":["src/components/inno-table-base/inno-table-base.scss?tag=inno-table-base&encapsulation=scoped","src/components/inno-table-base/inno-table-base.tsx"],"sourcesContent":["@use '@innomotics/brand-experience/styles/colors';\r\n\r\n:host {\r\n  scrollbar-width: thin;\r\n\r\n  .table-wrapper {\r\n    position: relative;\r\n    display: block;\r\n\r\n    .mask-layer {\r\n      z-index: 1;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      pointer-events: none;\r\n      width: 100%;\r\n      height: calc(100% - 20px);\r\n      background-color: rgba(0, 0, 0, 0);\r\n      -webkit-mask-image: linear-gradient(to right, var(--left-mask-color) 0%, transparent 15%, transparent 50%, transparent calc(100% - 200px), var(--right-mask-color) 100%);\r\n      mask-image: linear-gradient(to right, var(--left-mask-color) 0%, transparent 10%, transparent 85%, transparent calc(100% - 200px), var(--right-mask-color) 100%);\r\n      mask-size: contain;\r\n      --left-mask-color: transparent;\r\n      --right-mask-color: transparent;\r\n\r\n      &.is-left-overflowing {\r\n        background-color: colors.$primary-300;\r\n        --left-mask-color: black; //must be a solid color\r\n      }\r\n\r\n      &.is-right-overflowing {\r\n        background-color: colors.$primary-300;\r\n        --right-mask-color: black; //must be a solid color\r\n      }\r\n    }\r\n\r\n    .table-div {\r\n      display: block;\r\n      width: 100%;\r\n      font-size: 16px;\r\n      overflow-x: auto;\r\n      scrollbar-width: thin;\r\n    }\r\n  }\r\n}","import { Element, Component, Host, Prop, h, Listen, Method } from '@stencil/core';\r\nimport SimpleBar from 'simplebar';\r\n\r\n/**\r\n * Basic wrapper element for html tables. Adds some basic styling to the table and a custom scrollbar with fade-out effect.\r\n * Can be used without html table as well, in that case only the custom scrollbar with fade-out effect will be applied to the html element.\r\n */\r\n@Component({\r\n  tag: 'inno-table-base',\r\n  styleUrl: 'inno-table-base.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoTableBase {\r\n  /**\r\n   * Color variant of the table;\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * The fade-out effect while scrolling is achieved by using mask-image and linear-gradient. \r\n   * For it to work properly a color must be set to be the same as the table's background color.\r\n   */\r\n  @Prop({ mutable: true }) maskColor: string = '#ffffff';\r\n\r\n  @Element() hostElement: HTMLInnoTableBaseElement;\r\n  maskElement: HTMLDivElement;\r\n  scrollBar: SimpleBar;\r\n\r\n  /**\r\n   * The component tries its best to always apply the custom scrollbar and the fade-out effect automatically but there might be some cases \r\n   * (especially during/after initalization) where it just simply won't work. In those cases you can call this method manually.\r\n   */\r\n  @Method()\r\n  async refresh() {\r\n    this.recalculateScrollbar();\r\n  }\r\n\r\n  recalculateScrollbar() {\r\n    this.scrollBar.recalculate();\r\n    this.setMask(this.scrollBar.getScrollElement());\r\n  }\r\n\r\n  @Listen('resize', { target: 'window' })\r\n  onWindowResize() {\r\n    this.recalculateScrollbar();\r\n  }\r\n\r\n  setMask(el: HTMLElement) {\r\n    this.maskElement.classList.add('is-left-overflowing');\r\n    this.maskElement.classList.add('is-right-overflowing');\r\n    let leftMaskVisible: boolean = true;\r\n    let rightMaskVisible: boolean = true;\r\n\r\n    if (el.scrollLeft < 1) {\r\n      this.maskElement.classList.remove('is-left-overflowing');\r\n      leftMaskVisible = false;\r\n    }\r\n    if (el.scrollWidth - el.scrollLeft - el.clientWidth < 1) {\r\n      this.maskElement.classList.remove('is-right-overflowing');\r\n      rightMaskVisible = false;\r\n    }\r\n\r\n    this.maskElement.style.backgroundColor = ((leftMaskVisible || rightMaskVisible) ? this.maskColor : 'transparent');\r\n  }\r\n\r\n  scrollListener = (event: any) => {\r\n    this.setMask(event.target);\r\n  };\r\n\r\n  componentDidLoad() {\r\n    this.scrollBar = new SimpleBar(this.hostElement.querySelector('.table-div'), { autoHide: false });\r\n    this.maskElement = this.hostElement.querySelector<HTMLDivElement>('.mask-layer');\r\n    let table = this.hostElement.querySelector('table');\r\n    if (!!table) {\r\n      table.classList.add('inno-table');\r\n      if (this.variant == 'dark') {\r\n        table.classList.add('dark');\r\n      }\r\n    }\r\n\r\n    this.scrollBar.getScrollElement().addEventListener('scroll', this.scrollListener, { passive: true });\r\n\r\n    this.recalculateScrollbar();\r\n  }\r\n\r\n  componentWillUnload() {\r\n    this.scrollBar.getScrollElement().removeEventListener('scroll', this.scrollListener);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class={{ light: this.variant === 'light', dark: this.variant === 'dark' }}>\r\n        <div class=\"table-wrapper\">\r\n          <div class=\"mask-layer\"></div>\r\n          <div class=\"table-div\">\r\n            <slot></slot>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}