{"file":"p-d4b96023.js","mappings":";;AAAA,MAAM,WAAW,GAAG,yLAAyL,CAAC;AAC9M,uBAAe,WAAW;;MCMb,QAAQ;;;;;;oBAkBqB,EAAE;uBAKW,OAAO;;;IAK5D,MAAM,WAAW;QACf,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC9C;IAGD,MAAM,WAAW;QACf,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KAC7C;IAED,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;aAAM;YACL,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;KACF;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,QAAQ,IAAI,CAAC,IAAI,cAAc,IAAI,CAAC,IAAI,EAAE,IAAG,IAAI,CAAC,OAAO,CAAQ,CAAC;SACvF;QAED,QACE,EAAC,IAAI,IAAC,KAAK,EAAE,QAAQ,IAAI,CAAC,IAAI,cAAc,IAAI,CAAC,IAAI,EAAE,IACrD,WAAK,KAAK,EAAE,QAAQ,IAAI,CAAC,IAAI,SAAS,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,GAAQ,CAChF,EACP;KACH;IAED,MAAM,WAAW,CAAC,UAAmB;QACnC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;YAC5B,MAAM,OAAO,GAAG,MAAM,OAAO,iBAAmD,CAAC,CAAC;YAClF,MAAM,QAAQ,GAAG,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YACrC,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YAEvC,IAAI,YAAY,IAAI,IAAI,EAAE;gBACxB,OAAO,CAAC,KAAK,CAAC,wBAAwB,IAAI,CAAC,IAAI,oDAAoD,CAAC,CAAC;aACtG;YACD,OAAO,YAAY,CAAC;SACrB;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,UAAU,EAAE;YAC/B,QACE,YAAM,KAAK,EAAE,QAAQ,IAAI,CAAC,IAAI,SAAS,IAAI,CAAC,OAAO,YAAY,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,IACnG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAC7C,EACP;SACH;QAED,OAAO,IAAI,CAAC;KACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/inno-icon/inno-icon.scss?tag=inno-icon&encapsulation=scoped","src/components/inno-icon/inno-icon.tsx"],"sourcesContent":["@use '@innomotics/brand-experience/styles/colors';\r\n\r\n:host {\r\n    .icon-light {\r\n        color: inherit;\r\n    }\r\n\r\n    .icon-dark {\r\n        color: inherit;\r\n    }\r\n\r\n    .icon-font {\r\n      font-family: 'InnomoticsUiIcons';\r\n    }\r\n}\r\n","import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-icon',\r\n  styleUrl: 'inno-icon.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoIcon {\r\n  /**\r\n   * The icon name.\r\n   * Use either this or the iconFont property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/icons/\r\n   */\r\n  @Prop({ mutable: true }) icon: string;\r\n\r\n  /**\r\n   * Font icon code for the InnomoticsUiIcons font.\r\n   * Use either this or the icon property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/fonts/InnomoticsUiFont\r\n   */\r\n  @Prop({ mutable: true }) iconFont: string;\r\n\r\n  /*\r\n   * The icon size.\r\n   */\r\n  @Prop({ mutable: true }) size: number = 16;\r\n\r\n  /**\r\n   * Color style of the icon.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n\r\n  @State() content?: string;\r\n\r\n  @Watch('icon')\r\n  async iconChanged() {\r\n    this.content = await this.resolveIcon(false);\r\n  }\r\n\r\n  @Watch('iconFont')\r\n  async fontChanged() {\r\n    this.content = await this.resolveIcon(true);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    if (!this.iconFont) {\r\n      this.iconChanged();\r\n    } else {\r\n      this.fontChanged();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.iconFont) {\r\n      return <Host class={`icon-${this.size} icon-inno-${this.icon}`}>{this.content}</Host>;\r\n    }\r\n\r\n    return (\r\n      <Host class={`icon-${this.size} icon-inno-${this.icon}`}>\r\n        <div class={`icon-${this.size} icon-${this.variant}`} innerHTML={this.content}></div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  async resolveIcon(isIconFont: boolean): Promise<string | null> {\r\n    if (this.icon && !isIconFont) {\r\n      const svgIcon = await import(`@innomotics/brand-experience-icons/lib/inno-icons`);\r\n      const iconname = 'inno_' + this.icon;\r\n      const resolvedIcon = svgIcon[iconname];\r\n\r\n      if (resolvedIcon == null) {\r\n        console.error(`No content for icon \"${this.icon}\"! Maybe the icon was renamed or no longer exists.`);\r\n      }\r\n      return resolvedIcon;\r\n    }\r\n\r\n    if (this.iconFont && isIconFont) {\r\n      return (\r\n        <span class={`icon-${this.size} icon-${this.variant} icon-font`} style={{ fontSize: `${this.size}px` }}>\r\n          {String.fromCodePoint(parseInt(this.iconFont, 16))}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n"],"version":3}