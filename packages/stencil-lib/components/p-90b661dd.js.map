{"file":"p-90b661dd.js","mappings":"AAAA;;;;;;;;MAiBa,UAAU;IACL,SAAS,GAAkB,EAAE,CAAC;IACvC,cAAc,GAAkB,EAAE,CAAC;IAE1C,EAAE,GAAG,CAAC,QAAqB;QACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,OAAO;YACL,OAAO,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;SAClC,CAAC;KACH,CAAC;IAEF,IAAI,GAAG,CAAC,QAAqB;QAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC,CAAC;IAEF,GAAG,GAAG,CAAC,QAAqB;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;YACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;SACzC;KACF,CAAC;IAEF,IAAI,GAAG,CAAC,KAAQ;;QAEd,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;QAGpD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;YACnC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7C;KACF,CAAC;IAEF,IAAI,GAAG,CAAC,EAAiB;QACvB,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC,CAAC;;;;;","names":[],"sources":["src/utils/typed-event.ts"],"sourcesContent":["/*\r\n * SPDX-FileCopyrightText: 2023 Siemens AG\r\n *\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nexport interface Listener<T> {\r\n  (event: T): any;\r\n}\r\n\r\nexport interface Disposable {\r\n  dispose(): void;\r\n}\r\n\r\nexport class TypedEvent<T> {\r\n  public readonly listeners: Listener<T>[] = [];\r\n  public listenersOncer: Listener<T>[] = [];\r\n\r\n  on = (listener: Listener<T>): Disposable => {\r\n    this.listeners.push(listener);\r\n    return {\r\n      dispose: () => this.off(listener),\r\n    };\r\n  };\r\n\r\n  once = (listener: Listener<T>): void => {\r\n    this.listenersOncer.push(listener);\r\n  };\r\n\r\n  off = (listener: Listener<T>) => {\r\n    const callbackIndex = this.listeners.indexOf(listener);\r\n    if (callbackIndex > -1) {\r\n      this.listeners.splice(callbackIndex, 1);\r\n    }\r\n  };\r\n\r\n  emit = (event: T) => {\r\n    /** Update any general listeners */\r\n    this.listeners.forEach(listener => listener(event));\r\n\r\n    /** Clear the `once` queue */\r\n    if (this.listenersOncer.length > 0) {\r\n      const toCall = this.listenersOncer;\r\n      this.listenersOncer = [];\r\n      toCall.forEach(listener => listener(event));\r\n    }\r\n  };\r\n\r\n  pipe = (te: TypedEvent<T>): Disposable => {\r\n    return this.on(e => te.emit(e));\r\n  };\r\n}\r\n"],"version":3}