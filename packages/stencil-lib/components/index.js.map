{"file":"index.js","mappings":"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","names":[],"sources":["src/utils/delegate.ts","src/components/inno-modal/inno-modal.api.ts","src/components/inno-status-message/inno-status-message.api.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Copied from the the original Siemens IX library.\r\n/// Represents an abstraction how to add the view to the different containers.\r\n/// The default delegator uses the HTML DOM API to attach the element to the DOM tree.\r\n///\r\n/// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/delegate.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type DelegateConfig = {\r\n  parentElement?: Element;\r\n};\r\n\r\nexport interface FrameworkDelegate {\r\n  attachView<R = HTMLElement>(view: any, config?: DelegateConfig): Promise<R>;\r\n  removeView(view: any): Promise<void>;\r\n}\r\n\r\nclass DefaultFrameworkDelegate implements FrameworkDelegate {\r\n  async attachView<R = HTMLElement>(view: any, config?: DelegateConfig): Promise<R> {\r\n    const attachToElement = config?.parentElement ?? document.body;\r\n    attachToElement.appendChild(view);\r\n    return view;\r\n  }\r\n\r\n  async removeView(view: any) {\r\n    view.remove();\r\n  }\r\n}\r\n\r\nconst coreDelegate = new DefaultFrameworkDelegate();\r\nlet currentDelegate: FrameworkDelegate = coreDelegate;\r\n\r\nexport function registerFrameworkDelegate(delegate: FrameworkDelegate) {\r\n  currentDelegate = delegate;\r\n}\r\n\r\nexport const resolveDelegate = () => {\r\n  return currentDelegate;\r\n};\r\n\r\nexport const getCoreDelegate = () => coreDelegate;\r\n","////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Copied from the the original Siemens IX library.\r\n/// Modified for the Innomotics project.\r\n/// Provides a publicly available API to manage the modal functionality.\r\n///\r\n/// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/modal/modal.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { InnoModalSize } from './inno-modal.model';\r\nimport { getCoreDelegate, resolveDelegate } from '../../utils/delegate';\r\nimport { TypedEvent } from '../../utils/typed-event';\r\n\r\n/**\r\n * Modal instance configuration.\r\n */\r\nexport interface ModalConfig<CONTENT = any> {\r\n  animation?: boolean;\r\n  ariaDescribedby?: string;\r\n  ariaLabelledby?: string;\r\n  backdrop?: boolean;\r\n  closeOnBackdropClick?: boolean;\r\n  closeOnEscape?: boolean;\r\n  centered?: boolean;\r\n  container?: string | HTMLElement;\r\n  content: CONTENT | string;\r\n  fixed?: boolean;\r\n  size?: InnoModalSize;\r\n}\r\n\r\n/**\r\n * Reference to the opened modal instance.\r\n */\r\nexport interface ModalInstance<TReason = any> {\r\n  htmlElement: HTMLInnoModalElement;\r\n  onClose: TypedEvent<TReason>;\r\n  onDismiss: TypedEvent<TReason>;\r\n}\r\n\r\nexport function setA11yAttributes(element: HTMLElement, config: ModalConfig) {\r\n  const ariaDescribedby = config.ariaDescribedby;\r\n  const ariaLabelledby = config.ariaLabelledby;\r\n\r\n  delete config['ariaDescribedby'];\r\n  delete config['ariaLabelledby'];\r\n\r\n  if (ariaDescribedby) {\r\n    element.setAttribute('aria-describedby', ariaDescribedby);\r\n  }\r\n\r\n  if (ariaLabelledby) {\r\n    element.setAttribute('aria-labelledby', ariaLabelledby);\r\n  }\r\n}\r\n\r\nfunction getInnoModal(element: Element): HTMLInnoModalElement {\r\n  return element.closest('inno-modal');\r\n}\r\n\r\nexport function closeModal<TClose = any>(element: Element, closeResult: TClose) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.closeModal(closeResult);\r\n  }\r\n}\r\n\r\nexport function dismissModal(element: Element, dismissResult?: any) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.dismissModal(dismissResult);\r\n  }\r\n}\r\n\r\nexport async function showModal<T>(config: ModalConfig<T>): Promise<ModalInstance<T>> {\r\n  const delegate = resolveDelegate();\r\n  let dialogRef: HTMLInnoModalElement;\r\n  const onClose = new TypedEvent<T>();\r\n  const onDismiss = new TypedEvent<T>();\r\n\r\n  // Direct string content to load inticator content\r\n  if (typeof config.content === 'string') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.innerText = config.content;\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Provided only the body of the modal\r\n  if (config.content instanceof HTMLElement && config.content.tagName !== 'INNO-MODAL') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.appendChild(config.content);\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Full inno-modal content is provided\r\n  if (!dialogRef) {\r\n    dialogRef = await delegate.attachView<HTMLInnoModalElement>(config.content);\r\n  }\r\n\r\n  setA11yAttributes(dialogRef, config);\r\n  Object.assign(dialogRef, config);\r\n\r\n  await dialogRef.showModal();\r\n\r\n  dialogRef.addEventListener('dialogClose', async ({ detail }: CustomEvent) => {\r\n    onClose.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n  dialogRef.addEventListener('dialogDismiss', async ({ detail }: CustomEvent) => {\r\n    onDismiss.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n\r\n  return {\r\n    htmlElement: dialogRef,\r\n    onClose,\r\n    onDismiss,\r\n  };\r\n}\r\n","import { TypedEvent } from '../../utils/typed-event';\r\nimport { InnoStatusMessageContainer } from '../inno-status-message-container/inno-status-message-container';\r\n\r\n/**\r\n * Type of the status messages.\r\n */\r\nexport type InnoStatusMessageType = 'info' | 'success' | 'warning' | 'error';\r\n\r\n/**\r\n * Position of the status messages.\r\n */\r\nexport type InnoStatusMessagePosition = 'top-right' | 'bottom-right' | 'bottom-left' | 'top-left';\r\n\r\n/**\r\n * Available status message theme.\r\n */\r\nexport type InnoStatusMessageTheme = 'light' | 'dark';\r\n\r\n/**\r\n * Status message configuration.\r\n */\r\nexport interface InnoStatusMessageConfig {\r\n  /**\r\n   * Content of the status message.\r\n   */\r\n  message: string | HTMLElement;\r\n\r\n  /**\r\n   * Type of the message.\r\n   */\r\n  type?: InnoStatusMessageType;\r\n\r\n  /**\r\n   * Theme of the message.\r\n   */\r\n  theme?: InnoStatusMessageTheme;\r\n\r\n  /**\r\n   * Should close the message automatically.\r\n   */\r\n  autoClose?: boolean;\r\n\r\n  /**\r\n   * When to close the message.\r\n   * Applied to the autoClose and showProgress properties.\r\n   */\r\n  autoCloseDelay?: number;\r\n\r\n  /**\r\n   * Show the progress bar.\r\n   */\r\n  showProgress?: boolean;\r\n\r\n  /**\r\n   * Override the icon.\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * Override the color of the icon.\r\n   */\r\n  iconColor?: string;\r\n\r\n  /**\r\n   * Position of the message on the screen.\r\n   */\r\n  position?: InnoStatusMessagePosition;\r\n}\r\n\r\n/**\r\n * Reference to the opened message.\r\n */\r\nexport type ShowStatusMessageResult = {\r\n  onClose: TypedEvent<any | undefined>;\r\n  close: (result?: any) => void;\r\n};\r\n\r\nexport function getStatusMessageContainer(): HTMLElement & InnoStatusMessageContainer {\r\n  const containerList = Array.from(document.querySelectorAll('inno-status-message-container'));\r\n  const [container] = containerList;\r\n\r\n  if (containerList.length > 1) {\r\n    console.warn('Multiple toast containers were found. Only the first one will be used.');\r\n    return container as any;\r\n  }\r\n\r\n  if (!container) {\r\n    const statusMessageContainer = document.createElement('inno-status-message-container');\r\n    document.body.appendChild(statusMessageContainer);\r\n    return statusMessageContainer as any;\r\n  }\r\n\r\n  return container as any;\r\n}\r\n\r\nexport function setStatusMessagePosition(position: InnoStatusMessagePosition) {\r\n  const container = getStatusMessageContainer();\r\n  container.position = position;\r\n}\r\n\r\nfunction statusMessage(config: InnoStatusMessageConfig): Promise<ShowStatusMessageResult> {\r\n  const container = getStatusMessageContainer();\r\n  return container.showStatusMessage(config);\r\n}\r\n\r\nstatusMessage.info = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'info',\r\n  });\r\n};\r\n\r\nstatusMessage.error = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'error',\r\n  });\r\n};\r\n\r\nstatusMessage.success = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'success',\r\n  });\r\n};\r\n\r\nstatusMessage.warning = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'warning',\r\n  });\r\n};\r\n\r\nexport { statusMessage };\r\n"],"version":3}