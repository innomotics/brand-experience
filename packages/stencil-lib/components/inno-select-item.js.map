{"file":"inno-select-item.js","mappings":"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","names":["InnoSelectItem"],"sources":["src/components/inno-select/inno-select-item/inno-select-item.scss?tag=inno-select-item&encapsulation=scoped","src/components/inno-select/inno-select-item/inno-select-item.tsx"],"sourcesContent":["@use '@innomotics/brand-experience/styles/colors';\r\n\r\n:host {\r\n\r\n  background-color: colors.$additional-light-400;\r\n  color: colors.$text-light-buttonlabel;\r\n\r\n  &:hover {\r\n    background-color: colors.$text-dark-lowemphasis;\r\n    color: colors.$text-light-highemphasis;\r\n  }\r\n\r\n  &.focused {\r\n    background-color: colors.$text-dark-lowemphasis;\r\n    color: colors.$text-light-highemphasis;\r\n  }\r\n\r\n  &.selected {\r\n    color: colors.$highlight-light-200;\r\n  }\r\n\r\n  .content-wrapper {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n}","import { Element, Event, EventEmitter, Component, Host, Prop, h, Watch } from '@stencil/core';\r\nimport { Placement } from '@floating-ui/dom';\r\n\r\n@Component({\r\n  tag: 'inno-select-item',\r\n  styleUrl: 'inno-select-item.scss',\r\n  scoped: true,\r\n  formAssociated: true,\r\n})\r\nexport class InnoSelectItem {\r\n  /**\r\n   * Value of the item.\r\n   */\r\n  @Prop() value: any;\r\n\r\n  /**\r\n   * Label of the item, can be different from the value.\r\n   */\r\n  @Prop() label: string\r\n\r\n  /**\r\n   * Optional icon for the label. Use either this or the iconFont property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/icons/\r\n   */\r\n  @Prop() icon: string;\r\n\r\n  /**\r\n   * Optional icon font for the label. Use either this or the icon property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/fonts/InnomoticsUiFont\r\n   */\r\n  @Prop() iconFont: string;\r\n\r\n  /**\r\n   * Whether the item is selected or not.\r\n   */\r\n  @Prop({ mutable: true }) selected: boolean = false;\r\n\r\n  /**\r\n   * Adds a favorite icon to the selectable item. If you press this icon an event will be fired with the selected item. \r\n   * You have to take care of managing and ordering the array of favorite items in your business logic.\r\n   * Clicking on the favorite icon will not close the dropdown.\r\n   */\r\n  @Prop({ mutable: true }) canFavorite: boolean = false;\r\n\r\n  /**\r\n   * The selectable item is favorited or not.\r\n   */\r\n  @Prop({ mutable: true }) isFavorite: boolean = false;\r\n\r\n  /**\r\n   * Tooltip text for favorite add. The tooltip is only visible if the InnoSelectItem has a unique id.\r\n   */\r\n  @Prop({ mutable: true }) addToFavoritesLabel: string = \"Add to favorites\";\r\n\r\n  /**\r\n   * Tooltip text for favorite remove. The tooltip is only visible if the InnoSelectItem has a unique id.\r\n   */\r\n  @Prop({ mutable: true }) removeFromFavoritesLabel: string = \"Remove from favorites\";\r\n\r\n  /**\r\n   * Position of the favorite icon tooltip.\r\n   * Please note that the offset will remain the same in case the desired placement does not fit.\r\n   */\r\n  @Prop({ mutable: true }) favoriteIconTooltipPos: Placement = \"right\";\r\n\r\n  /**\r\n   * Color variant of the favorite icon tooltip.\r\n   */\r\n  @Prop({ mutable: true }) favoriteIconTooltipVariant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * Offset of the favorite icon tooltip position in pixels.\r\n   * Please note that the offset will remain the same in case the desired placement does not fit.\r\n   */\r\n  @Prop({ mutable: true }) favoriteIconTooltipOffset: number = 8;\r\n\r\n  /**\r\n   * A simple separator for the item. You can use it for example to visually separate the favorited and non-favorited items.\r\n   */\r\n  @Prop({ mutable: true }) hasSeparator: boolean = false;\r\n\r\n  /**\r\n   * This event is fired whenever an item is selected.\r\n   */\r\n  @Event() itemSelected: EventEmitter<any>;\r\n\r\n  /**\r\n   * This event is fired whenever an item is favorited.\r\n   */\r\n  @Event() itemFavorited: EventEmitter<any>;\r\n\r\n  /**\r\n   * This event is fired whenever an item is removed from favorites.\r\n   */\r\n  @Event() itemUnfavorited: EventEmitter<any>;\r\n\r\n  /**\r\n   * This event is fired whenever the selected item's label changes. The inno-select component then will rerender.\r\n   */\r\n  @Event() itemLabelChanged: EventEmitter<any>;\r\n\r\n  @Element() host: HTMLInnoSelectElement;\r\n\r\n  private popover: HTMLInnoPopoverElement;\r\n\r\n  private get hostElementHasId(): boolean {\r\n    return this.host.id != null && this.host.id.trim() !== '';\r\n  }\r\n\r\n  private get forSelector(): string {\r\n    return this.isFavorite ? `#${this.host.id} .star.favorite` : `#${this.host.id} .star.not-favorite`;\r\n  }\r\n\r\n  selectItem(event: MouseEvent) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    this.itemSelected.emit(this.value);\r\n  }\r\n\r\n  favoriteItem(event: MouseEvent) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n    this.isFavorite = true;\r\n    this.itemFavorited.emit(this.value);\r\n  }\r\n\r\n  unFavoriteItem(event: MouseEvent) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n    this.isFavorite = false;\r\n    this.itemUnfavorited.emit(this.value);\r\n  }\r\n\r\n  favoriteStar() {\r\n    return this.isFavorite\r\n      ? <span class=\"star favorite\" onClick={(event: MouseEvent) => this.unFavoriteItem(event)}>★</span>\r\n      : <span class=\"star not-favorite\" onClick={(event: MouseEvent) => this.favoriteItem(event)}>☆</span>;\r\n  }\r\n\r\n  favoriteStarPopup() {\r\n    if (!this.hostElementHasId) {\r\n      return null;\r\n    }\r\n\r\n    return <inno-popover\r\n      ref={el => this.popover = el}\r\n      popoverText={this.isFavorite ? this.removeFromFavoritesLabel : this.addToFavoritesLabel}\r\n      trigger='hover'\r\n      for={this.forSelector}\r\n      placement={this.favoriteIconTooltipPos}\r\n      variant={this.favoriteIconTooltipVariant}\r\n      offset={this.favoriteIconTooltipOffset}>\r\n    </inno-popover>;\r\n  }\r\n\r\n  @Watch('label')\r\n  labelChanged(newLabel: string) {\r\n    if (this.selected) {\r\n      this.itemLabelChanged.emit(newLabel);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.hostElementHasId && !!this.popover) {\r\n      this.popover.updateForElement(this.forSelector);\r\n    }\r\n\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          'select-item': true,\r\n          'icon-driven': this.icon != undefined || this.iconFont != undefined,\r\n          selected: this.selected,\r\n          'can-favorite': this.canFavorite,\r\n          separator: this.hasSeparator\r\n        }}\r\n        onClick={(e: MouseEvent) => this.selectItem(e)}\r\n      >\r\n        {this.icon ? <inno-icon icon={this.icon} size={24}></inno-icon> : null}\r\n        {this.iconFont && !this.icon ? <inno-icon iconFont={this.iconFont} size={24}></inno-icon> : null}\r\n        <div class=\"content-wrapper\">{this.label}</div>\r\n        {this.selected && !this.icon && !this.iconFont ? <inno-icon icon=\"check_checkbox\" size={24}></inno-icon> : null}\r\n        {this.canFavorite ? this.favoriteStar() : null}\r\n        {this.canFavorite ? this.favoriteStarPopup() : null}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}