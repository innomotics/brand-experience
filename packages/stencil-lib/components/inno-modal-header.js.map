{"file":"inno-modal-header.js","mappings":";;;AAAA;SAiCgB,iBAAiB,CAAC,IAAU,EAAE,QAAgB;IAC5D,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAI,YAAY,UAAU,EAAE;QAC9B,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC/C;IAED,IAAI,IAAI,YAAY,WAAW,EAAE;QAC/B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;SACrD;KACF;IAED,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AACtD;;ACnDA,MAAM,kBAAkB,GAAG,i6CAAi6C,CAAC;AAC77C,8BAAe,kBAAkB;;MCYpBA,iBAAe;;;;;;IAClB,YAAY,CAAM;;;;;IAOD,OAAO,GAAqB,OAAO,CAAC;;;;IAKrD,SAAS,GAAG,IAAI,CAAC;;;;IAKjB,IAAI,CAAU;;;;;IAMG,UAAU,CAAsB;IAEzD,gBAAgB;QACd,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;KACvE;IAEO,YAAY,CAAC,KAAY;QAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,gBAAgB,IAAI,KAAK,CAAC,gBAAgB,EAAE;YACjD,OAAO;SACR;QAED,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;KAClC;IAEO,YAAY;QAClB,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;YAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;SAC9B,CAAC;KACH;IAEO,SAAS;QACf,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;YAC/D,OAAO,iBAAW,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,GAAc,CAAC;SAC3E;aAAM;YACL,OAAO,IAAI,CAAC;SACb;KACF;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;YAChE,OAAO,iBAAW,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAc,CAAC;SAC3G;aAAM;YACL,OAAO,IAAI,CAAC;SACb;KACF;IAED,MAAM;QACJ,MAAM,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;QAE/C,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,WAAW,IACrB,IAAI,CAAC,SAAS,EAAE,EACjB,8DAAa,EACZ,IAAI,CAAC,YAAY,EAAE,CACf,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["InnoModalHeader"],"sources":["src/utils/siemensix/shadow-dom.ts","src/components/inno-modal/inno-modal-header/inno-modal-header.scss?tag=inno-modal-header&encapsulation=scoped","src/components/inno-modal/inno-modal-header/inno-modal-header.tsx"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Copied from the the original Siemens IX library.\r\n// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/shadow-dom.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function closestElement(selector: string, el: any) {\r\n  if (!el) {\r\n    return null;\r\n  }\r\n  return el.closest(selector) || closestElement(selector, (el.getRootNode() as any).host);\r\n}\r\n\r\nexport function getSlottedElements<R = any>(slot: any): R[] {\r\n  return slot.assignedElements({ flatten: true });\r\n}\r\n\r\nexport function hasSlottedElements(slot: any) {\r\n  if (!slot) {\r\n    return false;\r\n  }\r\n  return slot.assignedElements({ flatten: true }).length !== 0;\r\n}\r\n\r\nexport function containsElement(target: Element, element: Element) {\r\n  const hasShadowDom = target.shadowRoot;\r\n\r\n  if (hasShadowDom) {\r\n    target.contains(element) || target.shadowRoot.contains(element);\r\n  }\r\n\r\n  return target.contains(element);\r\n}\r\n\r\nexport function closestPassShadow(node: Node, selector: string) {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n\r\n  if (node instanceof ShadowRoot) {\r\n    return closestPassShadow(node.host, selector);\r\n  }\r\n\r\n  if (node instanceof HTMLElement) {\r\n    if (node.matches(selector)) {\r\n      return node;\r\n    } else {\r\n      return closestPassShadow(node.parentNode, selector);\r\n    }\r\n  }\r\n\r\n  return closestPassShadow(node.parentNode, selector);\r\n}\r\n","@use '@innomotics/brand-experience/styles/colors' as colors;\r\n@use '../../../../styles//siemens-ix/shadow-dom/component' as component;\r\n\r\n:host {\r\n  @include component.inno-component;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  align-self: stretch;\r\n\r\n  font-size: 24px;\r\n  line-height: 32px;\r\n  font-family: 'InnomoticsHafferSQ';\r\n  font-weight: bold;\r\n  text-overflow: ellipsis;\r\n\r\n  .modal-close {\r\n    align-self: flex-start;\r\n    margin-left: auto;\r\n    background-color: transparent;\r\n    color: colors.$primary-300;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      color: colors.$secondary-400;\r\n    }\r\n  }\r\n\r\n  .modal-icon {\r\n    margin-right: 1rem;\r\n    color: colors.$primary-300;\r\n  }\r\n\r\n  &.light {\r\n    color: colors.$primary-300;\r\n  }\r\n\r\n  &.dark {\r\n    color: colors.$primary-300;\r\n  }\r\n}\r\n","import { Component, Host, h, Element, Prop, Event as StencilEventDecorator, EventEmitter } from '@stencil/core';\r\nimport { closestPassShadow } from '../../../utils/siemensix/shadow-dom';\r\n\r\n/**\r\n * Represents the header of the inno-modal component.\r\n *\r\n * See the inno-modal component for more information.\r\n */\r\n@Component({\r\n  tag: 'inno-modal-header',\r\n  styleUrl: 'inno-modal-header.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoModalHeader {\r\n  private parentDialog: any;\r\n\r\n  @Element() hostElement!: any;\r\n\r\n  /**\r\n   * Theme variant of the component.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Hide the close button.\r\n   */\r\n  @Prop() showClose = true;\r\n\r\n  /**\r\n   * Icon of the header, optional.\r\n   */\r\n  @Prop() icon?: string;\r\n\r\n  /**\r\n   * Emits when close icon is clicked and closes the modal\r\n   * Can be prevented, in which case only the event is triggered, and the modal remains open\r\n   */\r\n  @StencilEventDecorator() closeClick: EventEmitter<Event>;\r\n\r\n  componentDidLoad() {\r\n    this.parentDialog = closestPassShadow(this.hostElement, 'inno-modal');\r\n  }\r\n\r\n  private onCloseClick(event: Event) {\r\n    const ce = this.closeClick.emit(event);\r\n    if (ce.defaultPrevented || event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.parentDialog.dismissModal();\r\n  }\r\n\r\n  private themeClasses() {\r\n    return {\r\n      light: this.variant === 'light',\r\n      dark: this.variant === 'dark',\r\n    };\r\n  }\r\n\r\n  private titleIcon() {\r\n    if (this.icon) {\r\n      const classes = { ...this.themeClasses(), 'modal-icon': true };\r\n      return <inno-icon icon={this.icon} class={classes} size={24}></inno-icon>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private closeControl() {\r\n    if (this.showClose) {\r\n      const classes = { ...this.themeClasses(), 'modal-close': true };\r\n      return <inno-icon icon=\"close\" class={classes} size={24} onClick={e => this.onCloseClick(e)}></inno-icon>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const hostClasses = { ...this.themeClasses() };\r\n\r\n    return (\r\n      <Host class={hostClasses}>\r\n        {this.titleIcon()}\r\n        <slot></slot>\r\n        {this.closeControl()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}