{"file":"inno-split.js","mappings":"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","names":["InnoSplit"],"sources":["src/components/inno-split/inno-split.scss?tag=inno-split&encapsulation=scoped","src/components/inno-split/inno-split.tsx"],"sourcesContent":[":host {\r\n  display: grid;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n\r\n  &.dragging {\r\n    user-select: none !important;\r\n\r\n    &.vertical {\r\n      cursor: row-resize;\r\n    }\r\n\r\n    &.horizontal {\r\n      cursor: col-resize;\r\n    }\r\n  }\r\n\r\n  .split-slot-container {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    min-width: 0;\r\n    min-height: 0;\r\n\r\n    &.horizontal {\r\n      flex-direction: row;\r\n    }\r\n\r\n    &.vertical {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}","import { Component, Element, Host, Method, Prop, State, h } from '@stencil/core';\r\n\r\n/**\r\n * Experimental component that lets the user separate and resize panels. Should only contain inno-split-item children components.\r\n * The inno-split-item components can contain inno-split component for nesting.\r\n */\r\n@Component({\r\n  tag: 'inno-split',\r\n  styleUrl: 'inno-split.scss',\r\n  scoped: true\r\n})\r\nexport class InnoSplit {\r\n  @Element() hostElement: HTMLInnoSplitElement;\r\n\r\n  @Prop() orientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Default size of each contained inno-split-item in percentage (width if 'horizontal', height if 'vertical'). If omitted they will have equal sizes.\r\n   */\r\n  @Prop() splitAreasDefaultSizes: number[] = [];\r\n\r\n  @State() splitAreasCurrentSizes: number[] = [];\r\n\r\n  @State() isMouseDown: boolean = false;\r\n\r\n  /**\r\n   * Required property. Unique slot names for the inno-split-items to insert into. Length must be equal to the number of inserted inno-split-items.\r\n   */\r\n  @Prop() slotNames!: string[];\r\n\r\n  private splitAreasIndices: number[] = [];\r\n  private originalPos: number | undefined = undefined;\r\n  private gutterIndex: number | undefined = undefined;\r\n  private splitSize: number | undefined = undefined;\r\n  private splitItemSize: number | undefined = undefined;\r\n  private nextSplitItemSize: number | undefined = undefined;\r\n  private minSize: number | undefined = undefined;\r\n  private maxSize: number | undefined = undefined;\r\n\r\n  private abortController: AbortController = new AbortController();\r\n\r\n  private get isHorizontal(): boolean {\r\n    return this.orientation === 'horizontal';\r\n  }\r\n\r\n  handleMouseDown(event: MouseEvent, gutterIndex: number): void {\r\n    this.isMouseDown = true;\r\n    this.originalPos = this.isHorizontal ? event.pageX : event.pageY;\r\n    this.gutterIndex = gutterIndex;\r\n    this.splitSize = this.isHorizontal ? this.hostElement.offsetWidth : this.hostElement.offsetHeight;\r\n    let splits = this.hostElement.querySelectorAll(\":scope > .split-slot-container\");\r\n    this.splitItemSize = (this.isHorizontal ? (splits.item(gutterIndex) as HTMLElement).offsetWidth : (splits.item(gutterIndex) as HTMLElement).offsetHeight) * 100 / this.splitSize;\r\n    this.nextSplitItemSize = (this.isHorizontal ? (splits.item(gutterIndex + 1) as HTMLElement).offsetWidth : (splits.item(gutterIndex + 1) as HTMLElement).offsetHeight) * 100 / this.splitSize;\r\n    this.minSize = 16 / this.splitSize * 100;\r\n    this.maxSize = this.splitItemSize + this.nextSplitItemSize;\r\n\r\n    this.startListening();\r\n  }\r\n\r\n  handleMouseUp(): void {\r\n    this.isMouseDown = false;\r\n    this.originalPos = undefined;\r\n    this.gutterIndex = undefined;\r\n    this.splitSize = undefined;\r\n    this.splitItemSize = undefined;\r\n    this.nextSplitItemSize = undefined;\r\n    this.minSize = undefined;\r\n    this.maxSize = undefined;\r\n\r\n    this.abortController.abort();\r\n    this.abortController = new AbortController();\r\n  }\r\n\r\n  handleMouseMove(event: MouseEvent): void {\r\n    if (!this.isMouseDown) {\r\n      return;\r\n    }\r\n\r\n    let newPos: number;\r\n\r\n    if (this.isHorizontal) {\r\n      newPos = (event.pageX * 100) / this.splitSize - (this.originalPos * 100) / this.splitSize;\r\n    } else {\r\n      newPos = (event.pageY * 100) / this.splitSize - (this.originalPos * 100) / this.splitSize;\r\n    }\r\n\r\n    let newSize: number = this.splitItemSize + newPos;\r\n\r\n    if (newSize < this.minSize) {\r\n      this.splitAreasCurrentSizes[this.gutterIndex] = this.minSize;\r\n      this.splitAreasCurrentSizes[this.gutterIndex + 1] = this.maxSize;\r\n    } else if (newSize > this.maxSize) {\r\n      this.splitAreasCurrentSizes[this.gutterIndex] = this.maxSize;\r\n      this.splitAreasCurrentSizes[this.gutterIndex + 1] = this.minSize\r\n    } else {\r\n      this.splitAreasCurrentSizes[this.gutterIndex] = this.splitItemSize + newPos;\r\n      this.splitAreasCurrentSizes[this.gutterIndex + 1] = this.nextSplitItemSize - newPos;\r\n    }\r\n\r\n    this.splitAreasCurrentSizes = [...this.splitAreasCurrentSizes];\r\n  }\r\n\r\n  private startListening(): void {\r\n    window.addEventListener('mousemove', e => this.handleMouseMove(e), { signal: this.abortController.signal });\r\n    window.addEventListener('mouseup', () => this.handleMouseUp(), { signal: this.abortController.signal });\r\n  }\r\n\r\n  /**\r\n   * Reinit the component. Can be used if the number of inno-split-items change.\r\n   */\r\n  @Method()\r\n  async reInit() {\r\n    this.init();\r\n\r\n    this.hostElement.querySelectorAll(':scope > .split-slot-container > inno-split-item > inno-split').forEach(el => {\r\n      (el as HTMLInnoSplitElement).reInit();\r\n    });\r\n  }\r\n\r\n  private init(): void {\r\n    let splitItems = Array.from(new Set([\r\n      ...Array.from(this.hostElement.querySelectorAll(':scope > inno-split-item')),\r\n      ...Array.from(this.hostElement.querySelectorAll(':scope > .split-slot-container > inno-split-item'))\r\n    ]));\r\n    splitItems.forEach((el, key) => {\r\n      el.slot = this.slotNames[key];\r\n    });\r\n\r\n    this.splitAreasIndices = [];\r\n    for (let i = 0; i < splitItems.length; i++) {\r\n      this.splitAreasIndices.push(i);\r\n    }\r\n\r\n    this.splitAreasCurrentSizes = [];\r\n    if (this.splitAreasDefaultSizes.length > 0 && this.splitAreasIndices.length === this.splitAreasDefaultSizes.length) {\r\n      this.splitAreasCurrentSizes = [...this.splitAreasDefaultSizes];\r\n    } else {\r\n      let defaultSize: number = 100 / this.splitAreasIndices.length;\r\n\r\n      for (let i = 0; i < splitItems.length; i++) {\r\n        this.splitAreasCurrentSizes.push(defaultSize);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.init();\r\n  }\r\n\r\n  render() {\r\n    this.splitAreasCurrentSizes[this.splitAreasCurrentSizes.length - 1] = 1; //last will be always '1fr'\r\n\r\n    let style = {\r\n      'grid-template-columns': this.isHorizontal ? this.splitAreasCurrentSizes.join('% ') + 'fr' : null,\r\n      'grid-template-rows': !this.isHorizontal ? this.splitAreasCurrentSizes.join('% ') + 'fr' : null,\r\n    }\r\n\r\n    return (\r\n      <Host class={{\r\n        'horizontal': this.orientation === 'horizontal',\r\n        'vertical': this.orientation === 'vertical',\r\n        'dragging': this.isMouseDown\r\n      }}\r\n        style={style}>\r\n        {this.splitAreasIndices.map(index => {\r\n          let hasGutter: boolean = this.splitAreasIndices.length > 1 && index !== (this.splitAreasIndices.length - 1);\r\n\r\n          return (\r\n            <div class={{\r\n              'split-slot-container': true,\r\n              'horizontal': this.orientation === 'horizontal',\r\n              'vertical': this.orientation === 'vertical'\r\n            }}>\r\n              <slot name={this.slotNames[index]}></slot>\r\n              {hasGutter\r\n                ? <inno-split-gutter orientation={this.orientation}\r\n                  onMouseDown={(e) => this.handleMouseDown(e, index)}>\r\n                </inno-split-gutter>\r\n                : null}\r\n            </div>)\r\n        })}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}