{"version":3,"file":"inno-breadcrumb.js","sourceRoot":"","sources":["../../../src/components/inno-breadcrumb/inno-breadcrumb.tsx"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAO/F,MAAM,OAAO,UAAU;IACV,WAAW,CAA6B;IAEnD;;OAEG;IACsB,OAAO,GAAqB,OAAO,CAAC;IAE7D;;OAEG;IACM,SAAS,CAAmD;IAGrE,uBAAuB,CAAC,KAAsD;QAC5E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAED,qBAAqB,CAAC,QAAyC;QAC7D,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC;YAClD,IAAI,UAAU,GAAW,CAAC,CAAC;YAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAE;gBACX,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;gBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;aAAC;YAChC;gBACG,IAAI,CAAC,KAAK,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,4BAAsB,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,MAAM,EAAC,SAAS,EAAE,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAyB,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC3J,8DAAa,CACV,CACA,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["/*\r\n * SPDX-FileCopyrightText: 2024 Innomotics GmbH\r\n *\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, h, Host, Listen, Prop } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-breadcrumb',\r\n  styleUrl: 'inno-breadcrumb.scss',\r\n  scoped: true,\r\n})\r\nexport class Breadcrumb {\r\n  @Element() hostElement!: HTMLInnoBreadcrumbElement;\r\n\r\n  /**\r\n   * Color variant of the accordion.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n  \r\n  /**\r\n   * Crumb item clicked event. The event contains the label and the zero-based index of the breadcrumb item inside the breadcrumb.\r\n   */\r\n  @Event() itemClick: EventEmitter<{itemIndex: number, label: string}>;\r\n\r\n  @Listen('breadcrumbItemClick')\r\n  onBreadcrumbItemClicked(event: CustomEvent<{itemIndex: number, label: string}>) {\r\n    this.itemClick.emit(event.detail);\r\n  }\r\n\r\n  get items() {\r\n    return [...Array.from(this.hostElement.querySelectorAll('inno-breadcrumb-item'))];\r\n  }\r\n\r\n  removeLastItemChevron(children: HTMLInnoBreadcrumbItemElement[]) {\r\n    if (children.length > 0) {\r\n      children[children.length - 1].showChevron = false;\r\n      let childrenId: number = 1;\r\n      children.forEach(c => c.itemIndex = childrenId++);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.removeLastItemChevron(this.items);\r\n    return (\r\n      <Host class={{\r\n        'light': this.variant === 'light',\r\n        'dark': this.variant === 'dark'}}>\r\n        <ol>\r\n          {this.items?.length > 0 ? (<inno-breadcrumb-item label=\"home\" icon=\"home\" itemIndex={0} showChevron={this.items.length > 0}></inno-breadcrumb-item>) : null}\r\n          <slot></slot>\r\n        </ol>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}