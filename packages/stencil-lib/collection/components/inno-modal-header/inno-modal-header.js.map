{"version":3,"file":"inno-modal-header.js","sourceRoot":"","sources":["../../../src/components/inno-modal-header/inno-modal-header.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,IAAI,qBAAqB,EAAgB,MAAM,eAAe,CAAC;AAChH,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AAEvE;;;;GAIG;AAMH,MAAM,OAAO,eAAe;;uBAQ2B,OAAO;yBAKxC,IAAI;;;IAZhB,YAAY,CAAM;IAEf,WAAW,CAAO;IAiB7B;;;OAGG;IACsB,UAAU,CAAsB;IAEzD,gBAAgB;QACd,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACxE,CAAC;IAEO,YAAY,CAAC,KAAY;QAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,gBAAgB,IAAI,KAAK,CAAC,gBAAgB,EAAE,CAAC;YAClD,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC;IAEO,YAAY;QAClB,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;YAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;SAC9B,CAAC;IACJ,CAAC;IAEO,SAAS;QACf,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;YAC/D,OAAO,iBAAW,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,GAAc,CAAC;QAC5E,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;YAChE,OAAO,iBAAW,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAc,CAAC;QAC5G,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;QAE/C,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAE,WAAW;YACrB,IAAI,CAAC,SAAS,EAAE;YACjB,8DAAa;YACZ,IAAI,CAAC,YAAY,EAAE,CACf,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Element, Prop, Event as StencilEventDecorator, EventEmitter } from '@stencil/core';\r\nimport { closestPassShadow } from './../../utils/siemensix/shadow-dom';\r\n\r\n/**\r\n * Represents the header of the inno-modal component.\r\n *\r\n * See the inno-modal component for more information.\r\n */\r\n@Component({\r\n  tag: 'inno-modal-header',\r\n  styleUrl: 'inno-modal-header.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoModalHeader {\r\n  private parentDialog: any;\r\n\r\n  @Element() hostElement!: any;\r\n\r\n  /**\r\n   * Theme variant of the component.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Hide the close button.\r\n   */\r\n  @Prop() showClose = true;\r\n\r\n  /**\r\n   * Icon of the header, optional.\r\n   */\r\n  @Prop() icon?: string;\r\n\r\n  /**\r\n   * Emits when close icon is clicked and closes the modal\r\n   * Can be prevented, in which case only the event is triggered, and the modal remains open\r\n   */\r\n  @StencilEventDecorator() closeClick: EventEmitter<Event>;\r\n\r\n  componentDidLoad() {\r\n    this.parentDialog = closestPassShadow(this.hostElement, 'inno-modal');\r\n  }\r\n\r\n  private onCloseClick(event: Event) {\r\n    const ce = this.closeClick.emit(event);\r\n    if (ce.defaultPrevented || event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.parentDialog.dismissModal();\r\n  }\r\n\r\n  private themeClasses() {\r\n    return {\r\n      light: this.variant === 'light',\r\n      dark: this.variant === 'dark',\r\n    };\r\n  }\r\n\r\n  private titleIcon() {\r\n    if (this.icon) {\r\n      const classes = { ...this.themeClasses(), 'modal-icon': true };\r\n      return <inno-icon icon={this.icon} class={classes} size={24}></inno-icon>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private closeControl() {\r\n    if (this.showClose) {\r\n      const classes = { ...this.themeClasses(), 'modal-close': true };\r\n      return <inno-icon icon=\"close\" class={classes} size={24} onClick={e => this.onCloseClick(e)}></inno-icon>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const hostClasses = { ...this.themeClasses() };\r\n\r\n    return (\r\n      <Host class={hostClasses}>\r\n        {this.titleIcon()}\r\n        <slot></slot>\r\n        {this.closeControl()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}