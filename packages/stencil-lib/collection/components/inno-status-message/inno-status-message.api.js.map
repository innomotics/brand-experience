{"version":3,"file":"inno-status-message.api.js","sourceRoot":"","sources":["../../../src/components/inno-status-message/inno-status-message.api.ts"],"names":[],"mappings":"AA6EA,MAAM,UAAU,yBAAyB;IACvC,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,CAAC,CAAC;IAC7F,MAAM,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;IAElC,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;QACvF,OAAO,SAAgB,CAAC;IAC1B,CAAC;IAED,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,MAAM,sBAAsB,GAAG,QAAQ,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;QACvF,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;QAClD,OAAO,sBAA6B,CAAC;IACvC,CAAC;IAED,OAAO,SAAgB,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,QAAmC;IAC1E,MAAM,SAAS,GAAG,yBAAyB,EAAE,CAAC;IAC9C,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAChC,CAAC;AAED,SAAS,aAAa,CAAC,MAA+B;IACpD,MAAM,SAAS,GAAG,yBAAyB,EAAE,CAAC;IAC9C,OAAO,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC;AAED,aAAa,CAAC,IAAI,GAAG,CAAC,MAA+B,EAAE,EAAE;IACvD,OAAO,aAAa,CAAC;QACnB,GAAG,MAAM;QACT,IAAI,EAAE,MAAM;KACb,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,aAAa,CAAC,KAAK,GAAG,CAAC,MAA+B,EAAE,EAAE;IACxD,OAAO,aAAa,CAAC;QACnB,GAAG,MAAM;QACT,IAAI,EAAE,OAAO;KACd,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,aAAa,CAAC,OAAO,GAAG,CAAC,MAA+B,EAAE,EAAE;IAC1D,OAAO,aAAa,CAAC;QACnB,GAAG,MAAM;QACT,IAAI,EAAE,SAAS;KAChB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,aAAa,CAAC,OAAO,GAAG,CAAC,MAA+B,EAAE,EAAE;IAC1D,OAAO,aAAa,CAAC;QACnB,GAAG,MAAM;QACT,IAAI,EAAE,SAAS;KAChB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import { TypedEvent } from '../../utils/typed-event';\r\nimport { InnoStatusMessageContainer } from '../inno-status-message-container/inno-status-message-container';\r\n\r\n/**\r\n * Type of the status messages.\r\n */\r\nexport type InnoStatusMessageType = 'info' | 'success' | 'warning' | 'error';\r\n\r\n/**\r\n * Position of the status messages.\r\n */\r\nexport type InnoStatusMessagePosition = 'top-right' | 'bottom-right' | 'bottom-left' | 'top-left';\r\n\r\n/**\r\n * Available status message theme.\r\n */\r\nexport type InnoStatusMessageTheme = 'light' | 'dark';\r\n\r\n/**\r\n * Status message configuration.\r\n */\r\nexport interface InnoStatusMessageConfig {\r\n  /**\r\n   * Content of the status message.\r\n   */\r\n  message: string | HTMLElement;\r\n\r\n  /**\r\n   * Type of the message.\r\n   */\r\n  type?: InnoStatusMessageType;\r\n\r\n  /**\r\n   * Theme of the message.\r\n   */\r\n  theme?: InnoStatusMessageTheme;\r\n\r\n  /**\r\n   * Should close the message automatically.\r\n   */\r\n  autoClose?: boolean;\r\n\r\n  /**\r\n   * When to close the message.\r\n   * Applied to the autoClose and showProgress properties.\r\n   */\r\n  autoCloseDelay?: number;\r\n\r\n  /**\r\n   * Show the progress bar.\r\n   */\r\n  showProgress?: boolean;\r\n\r\n  /**\r\n   * Override the icon.\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * Override the color of the icon.\r\n   */\r\n  iconColor?: string;\r\n\r\n  /**\r\n   * Position of the message on the screen.\r\n   */\r\n  position?: InnoStatusMessagePosition;\r\n}\r\n\r\n/**\r\n * Reference to the opened message.\r\n */\r\nexport type ShowStatusMessageResult = {\r\n  onClose: TypedEvent<any | undefined>;\r\n  close: (result?: any) => void;\r\n};\r\n\r\nexport function getStatusMessageContainer(): HTMLElement & InnoStatusMessageContainer {\r\n  const containerList = Array.from(document.querySelectorAll('inno-status-message-container'));\r\n  const [container] = containerList;\r\n\r\n  if (containerList.length > 1) {\r\n    console.warn('Multiple toast containers were found. Only the first one will be used.');\r\n    return container as any;\r\n  }\r\n\r\n  if (!container) {\r\n    const statusMessageContainer = document.createElement('inno-status-message-container');\r\n    document.body.appendChild(statusMessageContainer);\r\n    return statusMessageContainer as any;\r\n  }\r\n\r\n  return container as any;\r\n}\r\n\r\nexport function setStatusMessagePosition(position: InnoStatusMessagePosition) {\r\n  const container = getStatusMessageContainer();\r\n  container.position = position;\r\n}\r\n\r\nfunction statusMessage(config: InnoStatusMessageConfig): Promise<ShowStatusMessageResult> {\r\n  const container = getStatusMessageContainer();\r\n  return container.showStatusMessage(config);\r\n}\r\n\r\nstatusMessage.info = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'info',\r\n  });\r\n};\r\n\r\nstatusMessage.error = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'error',\r\n  });\r\n};\r\n\r\nstatusMessage.success = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'success',\r\n  });\r\n};\r\n\r\nstatusMessage.warning = (config: InnoStatusMessageConfig) => {\r\n  return statusMessage({\r\n    ...config,\r\n    type: 'warning',\r\n  });\r\n};\r\n\r\nexport { statusMessage };\r\n"]}