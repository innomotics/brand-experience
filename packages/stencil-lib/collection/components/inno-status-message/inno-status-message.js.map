{"version":3,"file":"inno-status-message.js","sourceRoot":"","sources":["../../../src/components/inno-status-message/inno-status-message.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Prop, h, State } from '@stencil/core';\r\nimport { StatusMessageTypeDetails, getDetailsForStatusMessage } from './inno-status-message.values';\r\nimport { InnoStatusMessageTheme, InnoStatusMessageType } from './inno-status-message.api';\r\n\r\n/**\r\n * Represents a status message entry.\r\n */\r\n@Component({\r\n  tag: 'inno-status-message',\r\n  styleUrl: 'inno-status-message.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoStatusMessage {\r\n  @Element() hostElement: HTMLElement;\r\n\r\n  @State() progress = 0;\r\n  @State() touched = false;\r\n\r\n  /**\r\n   * Theme variant of the component.\r\n   */\r\n  @Prop() theme: InnoStatusMessageTheme = 'light';\r\n\r\n  /**\r\n   * Type of the status message.\r\n   */\r\n  @Prop() messageType: InnoStatusMessageType = 'info';\r\n\r\n  /**\r\n   * Autoclose message after the given delay.\r\n   * The message will be closed independently from showProgress property.\r\n   */\r\n  @Prop() autoClose = false;\r\n\r\n  /**\r\n   * Autoclose delay.\r\n   */\r\n  @Prop() autoCloseDelay = 3000;\r\n\r\n  /**\r\n   * Animate progressbar and close after animation ends.\r\n   * The message will be closed independently from autoClose property.\r\n   */\r\n  @Prop() showProgress: boolean = false;\r\n\r\n  /**\r\n   * Icon of toast\r\n   */\r\n  @Prop() icon: string;\r\n\r\n  /**\r\n   * Icon color of toast\r\n   */\r\n  @Prop() iconColor: string;\r\n\r\n  /**\r\n   * Status message is closed.\r\n   */\r\n  @Event() closeMessage: EventEmitter;\r\n\r\n  componentDidLoad() {\r\n    if (this.autoClose) {\r\n      setTimeout(() => this.closeProcess(), this.autoCloseDelay);\r\n    }\r\n  }\r\n\r\n  private themeClasses(): ThemeClasses {\r\n    return {\r\n      light: this.theme === 'light',\r\n      dark: this.theme === 'dark',\r\n    };\r\n  }\r\n\r\n  private messageTypeDetails() {\r\n    return getDetailsForStatusMessage(this.messageType);\r\n  }\r\n\r\n  private closeProcess() {\r\n    if (this.hostElement) {\r\n      this.hostElement.classList.add('fadeOut');\r\n    }\r\n    setTimeout(() => {\r\n      this.closeMessage.emit();\r\n    }, 250);\r\n  }\r\n\r\n  private messageIcon(typeInfo: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'icon-container': true,\r\n      [typeInfo.typeClass]: true,\r\n    };\r\n\r\n    const iconName = this.icon ?? typeInfo.icon;\r\n    const iconStyle = this.iconColor ? { color: this.iconColor } : {};\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <inno-icon icon={iconName} size={48} style={iconStyle}></inno-icon>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private messageContainer(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'message-container': true,\r\n      [typeDetails.typeClass]: true,\r\n    };\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <slot></slot>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private closeControl(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      'close-container': true,\r\n      [typeDetails.typeClass]: true,\r\n    };\r\n\r\n    return (\r\n      <div class={classes}>\r\n        <inno-icon icon=\"close_small\" size={32} onClick={() => this.closeMessage.emit()}></inno-icon>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private progressBar(typeDetails: StatusMessageTypeDetails, themeClasses: ThemeClasses) {\r\n    const classes = {\r\n      ...themeClasses,\r\n      [typeDetails.typeClass]: true,\r\n      'progress-bar': true,\r\n      'progress-bar--animated': this.showProgress,\r\n    };\r\n\r\n    const progressBarStyle: Record<string, string> = {\r\n      animationDuration: `${this.autoCloseDelay}ms`,\r\n      animationPlayState: this.touched ? 'paused' : 'running',\r\n    };\r\n\r\n    return (\r\n      <div\r\n        class={classes}\r\n        style={progressBarStyle}\r\n        onAnimationEnd={() => this.closeProcess()}\r\n        onTransitionEnd={() => {\r\n          if (this.progress === 0) {\r\n            this.closeProcess();\r\n          }\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const typeDetails = this.messageTypeDetails();\r\n    const themeClasses = this.themeClasses();\r\n\r\n    const hostClasses = {\r\n      ...themeClasses,\r\n      [typeDetails.typeClass]: true,\r\n      'sm-fade-in': true,\r\n    };\r\n\r\n    return (\r\n      <Host class={hostClasses} onPointerEnter={() => (this.touched = true)} onPointerLeave={() => (this.touched = false)}>\r\n        {this.messageIcon(typeDetails, themeClasses)}\r\n        {this.messageContainer(typeDetails, themeClasses)}\r\n        {this.closeControl(typeDetails, themeClasses)}\r\n        {this.progressBar(typeDetails, themeClasses)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ThemeClasses {\r\n  readonly light: boolean;\r\n  readonly dark: boolean;\r\n}\r\n"]}