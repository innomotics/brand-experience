{"version":3,"file":"inno-button.js","sourceRoot":"","sources":["../../../src/components/inno-button/inno-button.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, Prop, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-button',\r\n  styleUrl: 'inno-button.scss',\r\n  scoped: true\r\n})\r\nexport class InnoButton {\r\n  /**\r\n   * Variant of the button.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'primary' | 'secondary' | 'tertiary' | 'media' | 'navigation' | 'delete' = 'primary';\r\n\r\n  /**\r\n   * Color variant of the button.\r\n   */\r\n  @Prop({ mutable: true }) colorVariant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * Type of the button.\r\n   */\r\n  @Prop() type: 'button' | 'submit' = 'button';\r\n\r\n  /**\r\n   * Tab index of the button.\r\n   */\r\n  @Prop({ mutable: true }) tabIdx: number = 0;\r\n\r\n  /**\r\n   * Whether the button is disabled or not.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled = false;\r\n\r\n  /**\r\n   * Icon to use inside the button. Use either this or the 'iconFont' property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/icons/\r\n   */\r\n  @Prop({ mutable: true }) icon: string;\r\n\r\n  /**\r\n   * Icon font to use inside the button. Use either this or the 'icon' property.\r\n   * For possible values, see: https://innomotics.github.io/brand-experience/docs/fonts/InnomoticsUiFont\r\n   */\r\n  @Prop({ mutable: true }) iconFont: string;\r\n\r\n  /**\r\n   * Where to put the icon relative to the text.\r\n   */\r\n  @Prop({ mutable: true }) iconPosition: 'left' | 'right' = 'right';\r\n\r\n  /**\r\n   * Direction of the navigation button. Only has effect if the variant is 'navigation'.\r\n   */\r\n  @Prop({ mutable: true }) navDirection: 'left' | 'right' = 'right';\r\n\r\n  /**\r\n   * Only show an icon.\r\n   */\r\n  @Prop() iconOnly: boolean = false;\r\n\r\n  /**\r\n   * Special style for button lists.\r\n   */\r\n  @Prop({ reflect: true }) listType: boolean = false\r\n\r\n  @Element() hostElement: HTMLInnoButtonElement;\r\n  submitButtonElement: HTMLButtonElement;\r\n\r\n  componentDidLoad() {\r\n    if (this.type === 'submit') {\r\n      const submitButton = document.createElement('button');\r\n      submitButton.style.display = 'none';\r\n      submitButton.type = 'submit';\r\n      submitButton.tabIndex = -1;\r\n      this.hostElement.appendChild(submitButton);\r\n\r\n      this.submitButtonElement = submitButton;\r\n    }\r\n  }\r\n\r\n  dispatchFormEvents() {\r\n    if (this.type === 'submit' && this.submitButtonElement) {\r\n      this.submitButtonElement.click();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let hasIcon: boolean = (this.icon != null && this.icon.trim() != '') || this.variant === 'navigation';\r\n    let hasIconFont: boolean = this.iconFont != null && this.iconFont.trim() != '';\r\n    let iconSize: number = this.variant === 'media' ? 32 : 24;\r\n    let icon: string = this.variant === 'navigation'\r\n      ? (this.navDirection === 'right' ? 'chevron_right_small' : 'chevron_left_small')\r\n      : (this.icon ?? this.iconFont);\r\n\r\n    return (\r\n      <Host class={{\r\n        disabled: this.disabled,\r\n        'list-type': this.listType\r\n      }}>\r\n        <button\r\n          class={\r\n            {\r\n              'primary': this.variant === 'primary',\r\n              'secondary': this.variant === 'secondary',\r\n              'tertiary': this.variant === 'tertiary',\r\n              'delete': this.variant === 'delete',\r\n              'media': this.variant === 'media',\r\n              'navigation': this.variant === 'navigation',\r\n              'icon-only': this.iconOnly,\r\n              'light': this.colorVariant === 'light',\r\n              'dark': this.colorVariant === 'dark',\r\n              'display-reverse': this.iconPosition === 'left',\r\n              'list-type': this.listType,\r\n              disabled: this.disabled\r\n            }\r\n          }\r\n          onClick={() => this.dispatchFormEvents()}\r\n          type={this.type}\r\n          tabIndex={this.disabled ? -1 : this.tabIdx ?? 0}\r\n        >\r\n          <slot></slot>\r\n          {hasIcon ? <inno-icon icon={icon} size={iconSize} variant={this.colorVariant}></inno-icon> : null}\r\n          {hasIconFont && !hasIcon ? <inno-icon iconFont={icon} size={iconSize} variant={this.colorVariant}></inno-icon> : null}\r\n        </button>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}