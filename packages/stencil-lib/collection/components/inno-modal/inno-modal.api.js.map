{"version":3,"file":"inno-modal.api.js","sourceRoot":"","sources":["../../../src/components/inno-modal/inno-modal.api.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Copied from the the original Siemens IX library.\r\n/// Modified for the Innomotics project.\r\n/// Provides a publicly available API to manage the modal functionality.\r\n///\r\n/// Reference: https://github.com/siemens/ix/blob/main/packages/core/src/components/utils/modal/modal.ts\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { InnoModalSize } from './inno-modal.model';\r\nimport { getCoreDelegate, resolveDelegate } from '../../utils/delegate';\r\nimport { TypedEvent } from '../../utils/typed-event';\r\n\r\n/**\r\n * Modal instance configuration.\r\n */\r\nexport interface ModalConfig<CONTENT = any> {\r\n  animation?: boolean;\r\n  ariaDescribedby?: string;\r\n  ariaLabelledby?: string;\r\n  backdrop?: boolean;\r\n  closeOnBackdropClick?: boolean;\r\n  closeOnEscape?: boolean;\r\n  centered?: boolean;\r\n  container?: string | HTMLElement;\r\n  content: CONTENT | string;\r\n  fixed?: boolean;\r\n  size?: InnoModalSize;\r\n}\r\n\r\n/**\r\n * Reference to the opened modal instance.\r\n */\r\nexport interface ModalInstance<TReason = any> {\r\n  htmlElement: HTMLInnoModalElement;\r\n  onClose: TypedEvent<TReason>;\r\n  onDismiss: TypedEvent<TReason>;\r\n}\r\n\r\nexport function setA11yAttributes(element: HTMLElement, config: ModalConfig) {\r\n  const ariaDescribedby = config.ariaDescribedby;\r\n  const ariaLabelledby = config.ariaLabelledby;\r\n\r\n  delete config['ariaDescribedby'];\r\n  delete config['ariaLabelledby'];\r\n\r\n  if (ariaDescribedby) {\r\n    element.setAttribute('aria-describedby', ariaDescribedby);\r\n  }\r\n\r\n  if (ariaLabelledby) {\r\n    element.setAttribute('aria-labelledby', ariaLabelledby);\r\n  }\r\n}\r\n\r\nfunction getInnoModal(element: Element): HTMLInnoModalElement {\r\n  return element.closest('inno-modal');\r\n}\r\n\r\nexport function closeModal<TClose = any>(element: Element, closeResult: TClose) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.closeModal(closeResult);\r\n  }\r\n}\r\n\r\nexport function dismissModal(element: Element, dismissResult?: any) {\r\n  const dialog = getInnoModal(element);\r\n  if (dialog) {\r\n    dialog.dismissModal(dismissResult);\r\n  }\r\n}\r\n\r\nexport async function showModal<T>(config: ModalConfig<T>): Promise<ModalInstance<T>> {\r\n  const delegate = resolveDelegate();\r\n  let dialogRef: HTMLInnoModalElement;\r\n  const onClose = new TypedEvent<T>();\r\n  const onDismiss = new TypedEvent<T>();\r\n\r\n  // Direct string content to load inticator content\r\n  if (typeof config.content === 'string') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.innerText = config.content;\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Provided only the body of the modal\r\n  if (config.content instanceof HTMLElement && config.content.tagName !== 'INNO-MODAL') {\r\n    const dialog = document.createElement('inno-modal');\r\n    dialog.appendChild(config.content);\r\n    dialogRef = await getCoreDelegate().attachView(dialog);\r\n  }\r\n\r\n  // Full inno-modal content is provided\r\n  if (!dialogRef) {\r\n    dialogRef = await delegate.attachView<HTMLInnoModalElement>(config.content);\r\n  }\r\n\r\n  setA11yAttributes(dialogRef, config);\r\n  Object.assign(dialogRef, config);\r\n\r\n  await dialogRef.showModal();\r\n\r\n  dialogRef.addEventListener('dialogClose', async ({ detail }: CustomEvent) => {\r\n    onClose.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n  dialogRef.addEventListener('dialogDismiss', async ({ detail }: CustomEvent) => {\r\n    onDismiss.emit(detail);\r\n    await delegate.removeView(dialogRef);\r\n  });\r\n\r\n  return {\r\n    htmlElement: dialogRef,\r\n    onClose,\r\n    onDismiss,\r\n  };\r\n}\r\n"]}