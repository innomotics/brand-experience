{"version":3,"file":"inno-status-message-container.js","sourceRoot":"","sources":["../../../src/components/inno-status-message-container/inno-status-message-container.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Host, Method, Prop, Watch } from '@stencil/core';\r\nimport { TypedEvent } from '../../utils/typed-event';\r\nimport { InnoStatusMessageConfig, InnoStatusMessagePosition, ShowStatusMessageResult } from '../inno-status-message/inno-status-message.api';\r\n\r\n/**\r\n * Container to hold the status messages.\r\n *\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'inno-status-message-container',\r\n  styleUrl: './inno-status-message-container.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoStatusMessageContainer {\r\n  /**\r\n   * Customizable container id.\r\n   */\r\n  @Prop() containerId = 'status-message-container';\r\n\r\n  /**\r\n   * Customizable container class.\r\n   */\r\n  @Prop() containerClass = 'status-message-container';\r\n\r\n  /**\r\n   * Position of container.\r\n   */\r\n  @Prop() position: InnoStatusMessagePosition = 'top-right';\r\n\r\n  private readonly PREFIX_POSITION_CLASS = 'status-message-container--';\r\n\r\n  get hostContainer() {\r\n    return new Promise<HTMLElement>(resolve => {\r\n      const interval = setInterval(() => {\r\n        const containerElement = document.getElementById(this.containerId);\r\n        if (containerElement) {\r\n          clearInterval(interval);\r\n          resolve(containerElement);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (!document.getElementById(this.containerId)) {\r\n      const container = document.createElement('div');\r\n      container.id = this.containerId;\r\n      container.classList.add(this.containerClass);\r\n      container.classList.add(`${this.PREFIX_POSITION_CLASS}${this.position}`);\r\n      document.body.appendChild(container);\r\n    }\r\n  }\r\n\r\n  @Watch('position')\r\n  onPositionChange(newPosition: string, oldPosition: string) {\r\n    const container = document.getElementById(this.containerId);\r\n    container.classList.remove(`${this.PREFIX_POSITION_CLASS}${oldPosition}`);\r\n    container.classList.add(`${this.PREFIX_POSITION_CLASS}${newPosition}`);\r\n  }\r\n\r\n  /**\r\n   * Display a toast message\r\n   * @param config\r\n   */\r\n  @Method()\r\n  async showStatusMessage(config: InnoStatusMessageConfig): Promise<ShowStatusMessageResult> {\r\n    const statusMessage = document.createElement('inno-status-message');\r\n    const onClose = new TypedEvent<any | undefined>();\r\n\r\n    function removeStatusMessage(result?: any) {\r\n      statusMessage.remove();\r\n      onClose.emit(result);\r\n    }\r\n\r\n    // Config status message\r\n    if (config.type) {\r\n      statusMessage.messageType = config.type;\r\n    }\r\n    if (config.theme) {\r\n      statusMessage.theme = config.theme;\r\n    }\r\n    statusMessage.autoClose = config.autoClose;\r\n    statusMessage.autoCloseDelay = config.autoCloseDelay ?? 3000;\r\n    statusMessage.showProgress = config.showProgress;\r\n    statusMessage.icon = config.icon;\r\n    statusMessage.iconColor = config.iconColor;\r\n\r\n    // Subscribe to close event\r\n    statusMessage.addEventListener('closeMessage', (event: CustomEvent<any | undefined>) => {\r\n      const { detail } = event;\r\n      removeStatusMessage(detail);\r\n    });\r\n\r\n    // Set stasus message content\r\n    if (typeof config.message === 'string') {\r\n      statusMessage.innerText = config.message;\r\n    } else {\r\n      statusMessage.appendChild(config.message);\r\n    }\r\n\r\n    (await this.hostContainer).appendChild(statusMessage);\r\n\r\n    return {\r\n      onClose,\r\n      close: (result?: any) => {\r\n        removeStatusMessage(result);\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [`${this.PREFIX_POSITION_CLASS}top-right`]: this.position === 'top-right',\r\n          [`${this.PREFIX_POSITION_CLASS}bottom-right`]: this.position === 'bottom-right',\r\n          [`${this.PREFIX_POSITION_CLASS}bottom-left`]: this.position === 'bottom-left',\r\n          [`${this.PREFIX_POSITION_CLASS}top-left`]: this.position === 'top-left',\r\n        }}\r\n      >\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}