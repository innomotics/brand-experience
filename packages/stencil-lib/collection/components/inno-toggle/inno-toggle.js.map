{"version":3,"file":"inno-toggle.js","sourceRoot":"","sources":["../../../src/components/inno-toggle/inno-toggle.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC9F,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAO/C,MAAM,OAAO,UAAU;IACV,WAAW,CAAyB;IAE/C;;OAEG;IACqC,OAAO,GAAY,KAAK,CAAC;IAEjE;;OAEG;IACsB,QAAQ,GAAY,KAAK,CAAC;IAEnD;;OAEG;IACsB,OAAO,GAAqB,MAAM,CAAC;IAE5D;;OAEG;IACsB,MAAM,GAAW,CAAC,CAAC;IAE5C;;OAEG;IACM,aAAa,CAAwB;IAE9C,eAAe,CAAC,UAAmB;QACjC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;IAC5B,CAAC;IAGD,oBAAoB,CAAC,QAAiB,EAAE,QAAiB;QACvD,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,EACD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAElD,8DACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAC1C,IAAI,EAAC,UAAU,kBACD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAClB,IAAI,CAAC,eAAe,CAAE,KAAK,CAAC,MAAc,CAAC,OAAO,CAAC,GAE9C;YACT,8DAAO,KAAK,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,CAAC;gBAChC,6DACE,KAAK,EAAE;wBACL,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;wBAC/B,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO;qBAClC,GACI,CACD,CACH,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, h, Prop, Watch } from '@stencil/core';\r\nimport { a11yBoolean } from '../../utils/a11y';\r\n\r\n@Component({\r\n  tag: 'inno-toggle',\r\n  styleUrl: 'inno-toggle.scss',\r\n  scoped: true\r\n})\r\nexport class InnoToggle {\r\n  @Element() hostElement!: HTMLInnoToggleElement;\r\n\r\n  /**\r\n   * Whether the slide-toggle element is checked or not. Can be changed programatically, will emit a change event.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the slide-toggle element is disabled or not.\r\n   */\r\n  @Prop({ mutable: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * Color variant of the toggle component.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'dark' | 'light' = 'dark';\r\n\r\n  /**\r\n   * The tab index of the toggle\r\n   */\r\n  @Prop({ mutable: true }) tabIdx: number = 0;\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle changes its value.\r\n   */\r\n  @Event() checkedChange: EventEmitter<boolean>;\r\n\r\n  onCheckedChange(newChecked: boolean) {\r\n    this.checked = newChecked;\r\n  }\r\n\r\n  @Watch('checked')\r\n  checkedChangeHandler(newValue: boolean, oldValue: boolean) {\r\n    if (newValue !== oldValue) {\r\n      this.checkedChange.emit(this.checked);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          disabled: this.disabled\r\n        }}\r\n        onClick={() => this.onCheckedChange(!this.checked)}\r\n      >\r\n        <input\r\n          disabled={this.disabled}\r\n          checked={this.checked}\r\n          role=\"switch\"\r\n          tabindex={this.disabled ? -1 : this.tabIdx}\r\n          type=\"checkbox\"\r\n          aria-checked={a11yBoolean(this.checked)}\r\n          onChange={(event) =>\r\n            this.onCheckedChange((event.target as any).checked)\r\n          }\r\n        ></input>\r\n        <label class=\"switch\" tabIndex={-1}>\r\n          <span\r\n            class={{\r\n              \"slider\": true,\r\n              \"dark\": this.variant === \"dark\",\r\n              \"light\": this.variant === \"light\"\r\n            }}>\r\n          </span>\r\n        </label>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}