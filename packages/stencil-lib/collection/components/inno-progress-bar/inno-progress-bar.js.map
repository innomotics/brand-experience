{"version":3,"file":"inno-progress-bar.js","sourceRoot":"","sources":["../../../src/components/inno-progress-bar/inno-progress-bar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'inno-progress-bar',\r\n  styleUrl: 'inno-progress-bar.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoProgressBar {\r\n\r\n  /**\r\n   * Color variant of the progress bar.\r\n   */\r\n  @Prop({ mutable: true }) variant: 'light' | 'dark' = 'light';\r\n\r\n  /**\r\n   * Text to display for the progress bar.\r\n   */\r\n  @Prop({ mutable: true }) progressText: string = '';\r\n\r\n  /**\r\n   * Progress in percentage. Must be a number between 0 and 100.\r\n   */\r\n  @Prop({ mutable: true }) progressPercentage: number = 0;\r\n\r\n  /**\r\n   * Show the percentage number on the progress bar. The value is rounded according to the 'percentagePrecision' and 'trailingZeroes' properties.\r\n   */\r\n  @Prop({ mutable: true }) showPercentage: boolean = true;\r\n\r\n  /**\r\n   * If the percentage number is shown, how many decimal places should be visible\r\n   */\r\n  @Prop({ mutable: true }) percentagePrecision: number = 0;\r\n\r\n  /**\r\n   * If 'percentagePrecision' is larger than 0, should we display the trailing zeroes.\r\n   * For example if the progress is 1.5% and the 'percentagePrecision' is 2 then the displayed text will be '1.50%' \r\n   * if trailing zeroes are enabled and '1.5%' if trailing zeroes are disabled.\r\n   * Uses the toFixed(..) function in the background.\r\n   */\r\n  @Prop({ mutable: true }) trailingZeroes: boolean = false;\r\n\r\n  private frontLayerRef: HTMLDivElement;\r\n\r\n  @Watch('progressPercentage')\r\n  progressChangedhandler(newValue: number): void {\r\n    this.setClipPath(newValue);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.setClipPath(this.progressPercentage)\r\n  }\r\n\r\n  private setClipPath(newValue: number): void {\r\n    this.validateProps();\r\n\r\n    let newClipPath: string = `inset(0 0 0 ${newValue}%)`;\r\n    this.frontLayerRef.style.clipPath = newClipPath;\r\n    this.frontLayerRef.style['-webkit-clip-path'] = newClipPath;\r\n  }\r\n\r\n  private progressNum(): string | number {\r\n    this.validateProps();\r\n\r\n    if (this.trailingZeroes) {\r\n      return this.progressPercentage.toFixed(this.percentagePrecision);\r\n    } else {\r\n      return +this.progressPercentage.toFixed(this.percentagePrecision);\r\n    }\r\n  }\r\n\r\n  private validateProps(): void {\r\n    if (this.progressPercentage < 0) {\r\n      throw `progressPercentage is smaller than 0! The value is ${this.progressPercentage}`;\r\n    } else if (this.progressPercentage > 100) {\r\n      throw `progressPercentage is larger than 100! The value is ${this.progressPercentage}`;\r\n    }\r\n\r\n    if (this.percentagePrecision < 0) {\r\n      throw `percentagePrecision is smaller than 0! The value is ${this.percentagePrecision}`;\r\n    }\r\n  }\r\n\r\n  private progressHtml() {\r\n    let progressPercentage = `${this.progressNum()}%`;\r\n\r\n    return (\r\n      <div class=\"progress-text-container\">\r\n        {this.showPercentage ? <div class=\"percentage\">{progressPercentage}</div> : null}\r\n        <div class=\"progress-text\">{this.progressText}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"progress-bar-container\">\r\n          <div class={\r\n            {\r\n              'back-layer': true,\r\n              'light': this.variant === 'light',\r\n              'dark': this.variant === 'dark',\r\n            }\r\n          }>{this.progressHtml()}</div>\r\n          <div class={\r\n            {\r\n              'front-layer': true,\r\n              'light': this.variant === 'light',\r\n              'dark': this.variant === 'dark',\r\n            }\r\n          } ref={(ref) => (this.frontLayerRef = ref)}>{this.progressHtml()}</div>\r\n        </div>\r\n      </Host >\r\n    );\r\n  }\r\n\r\n}\r\n"]}