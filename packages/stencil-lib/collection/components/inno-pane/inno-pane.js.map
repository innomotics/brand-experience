{"version":3,"file":"inno-pane.js","sourceRoot":"","sources":["../../../src/components/inno-pane/inno-pane.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\nimport anime from 'animejs';\r\n\r\nexport type ExpandedChangedEvent = {\r\n  expanded: boolean;\r\n};\r\n\r\n@Component({\r\n  tag: 'inno-pane',\r\n  styleUrl: 'inno-pane.scss',\r\n  scoped: true,\r\n})\r\nexport class InnoPane {\r\n  @Element() hostElement: HTMLInnoPaneElement;\r\n\r\n  /**\r\n   * Position of the pane.\r\n   */\r\n  @Prop({ mutable: true }) position: 'top' | 'left' | 'bottom' | 'right' = 'right';\r\n\r\n  /**\r\n   * Programatically control whether the pane is opened or closed.\r\n   */\r\n  @Prop({ mutable: true }) expanded: boolean = false;\r\n\r\n  /**\r\n   * The pane comes with a close button by default. Hide it with this property.\r\n   */\r\n  @Prop({ mutable: true }) hideCloseButton: boolean = false;\r\n\r\n  /**\r\n   * Title of the pane.\r\n   */\r\n  @Prop({ mutable: true }) titleText: string;\r\n\r\n  /**\r\n   * Whether the pane is closeable by clicking outside of it.\r\n   */\r\n  @Prop({ mutable: true }) closeOnBackdropClick: boolean = true;\r\n\r\n  /**\r\n   * Size of the pane. It is a width value in case of 'left' and 'right' position, and a height value in case of 'top' and 'bottom' position. \r\n   * All css units are supported which are supported by width and height css properties.\r\n   */\r\n  @Prop({ mutable: true }) paneSize: string = '100%';\r\n\r\n  /**\r\n   * This event is fired when the pane is opened or closed.\r\n   */\r\n  @Event() expandedChanged: EventEmitter<ExpandedChangedEvent>;\r\n\r\n  @State() private showContent = false;\r\n\r\n  closeViaBackdrop(event: globalThis.Event): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    if (this.closeOnBackdropClick) {\r\n      this.expanded = false;\r\n    }\r\n  }\r\n\r\n  private emitExpandedChangedEvent(): void {\r\n    this.expandedChanged.emit({\r\n      expanded: this.expanded\r\n    });\r\n  }\r\n\r\n  @Watch('expanded')\r\n  onExpandedChange() {\r\n    this.showContent = false;\r\n    if (this.position === 'top' || this.position === 'bottom') {\r\n      this.animateVerticalPane(this.expanded ? this.paneSize : '0');\r\n    } else {\r\n      this.animateHorizontalPane(this.expanded ? this.paneSize : '0');\r\n    }\r\n  }\r\n\r\n  private animateHorizontalPane(width: string) {\r\n    anime({\r\n      targets: this.hostElement.querySelector(\".pane-content-container\"),\r\n      duration: 300,\r\n      width: width,\r\n      easing: 'cubicBezier(0.84, 0, 0.58, 1)',\r\n      delay: 0,\r\n      complete: () => {\r\n        this.showContent = true;\r\n\r\n        this.emitExpandedChangedEvent();\r\n      }\r\n    });\r\n  }\r\n\r\n  private animateVerticalPane(height: string) {\r\n    anime({\r\n      targets: this.hostElement.querySelector(\".pane-content-container\"),\r\n      duration: 300,\r\n      height: height,\r\n      easing: 'cubicBezier(0.84, 0, 0.58, 1)',\r\n      delay: 0,\r\n      complete: () => {\r\n        this.showContent = true;\r\n\r\n        this.emitExpandedChangedEvent();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class={{\r\n        'not-visible': !this.expanded\r\n      }}>\r\n        <div class='pane-backdrop' onClick={(e) => this.closeViaBackdrop(e)}></div>\r\n        <div class={{\r\n          'pane-content-container': true,\r\n          'pane-pos-top': this.position === 'top',\r\n          'pane-pos-left': this.position === 'left',\r\n          'pane-pos-bottom': this.position === 'bottom',\r\n          'pane-pos-right': this.position === 'right'\r\n        }}\r\n        >\r\n          <div class={{\r\n            'pane-title-container': true,\r\n            'no-title': this.titleText == null\r\n          }}\r\n            hidden={!this.showContent || !this.expanded}>\r\n            {this.titleText != null ? <h2>{this.titleText}</h2> : null}\r\n            {!this.hideCloseButton\r\n              ? <inno-button id='innoPaneClose' icon='close' variant='tertiary' iconOnly={true} colorVariant='light'\r\n                onClick={() => this.expanded = !this.expanded}></inno-button>\r\n              : null}\r\n          </div>\r\n          <div hidden={!this.showContent || !this.expanded}>\r\n            <slot></slot>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}